{"version":3,"sources":["util/browser-util.js","hooks/useLocalStorage.js","util/file-util.js","util/region-util.js","hooks/useTaskStatus.js","util/runelite-util.js","components/ManageDataModal.js","components/TopNav.js","components/BlogEntry.js","components/NewsEntry.js","util/settings-util.js","pages/Homepage.js","pages/Calculators.js","util/relic-util.js","util/exp-table.js","util/calculator-util.js","components/MultiplierGroup.js","components/LevelExpInput.js","hooks/useLevel.js","hooks/useMultiplier.js","client/hiscores-client.js","components/HiscoreLookup.js","pages/SkillCalculator.js","pages/SkillPlanner.js","hooks/useScreenSize.js","components/UnlockProgressBar.js","components/RegionMap.js","components/RegionsTracker.js","components/RelicInfoTile.js","components/RelicsTracker.js","util/task-util.js","components/TaskTable.js","components/RandomTaskGenerator.js","components/Divider.js","components/TaskTracker.js","hooks/useQueryString.js","pages/CharacterTracker.js","pages/About.js","pages/PluginInfo.js","pages/Settings.js","pages/ComingSoon.js","App.js","index.js"],"names":["LOCALSTORAGE_KEYS","SESSIONSTORAGE_KEYS","getFromLocalStorage","key","initialValue","useSessionStorage","item","window","sessionStorage","getItem","localStorage","JSON","parse","error","console","warn","updateLocalStorage","value","setValueCallback","setItem","stringify","resetLocalStorageData","clear","useLocalStorage","getValue","useState","storedValue","setStoredValue","setValue","valueToStore","Function","refreshStoredValue","saveLocalStorageToFile","blob","Blob","type","saveAs","Date","now","loadLocalStorageFromFile","fileObject","a","text","loadedText","success","message","storageJson","Object","entries","REGION_UNLOCKS","REGIONS","INITIAL_REGIONS_STATE","isRegionUnlocked","region","unlockedRegions","includes","INITIAL_TASKS_STATE_V2","version","tasks","todoList","INITIAL_TASKS_STATE_V3","hidden","useTaskStatus","storedTaskStatus","setTaskStatus","taskStatus","shouldUpdateVersion","updatedVersion","prevVersion","updateToVersion3","newTaskStatus","forEach","taskStatusInRegion","id","status","complete","push","updateToVersion2","updateTaskStatusVersion","setCompleted","taskId","isComplete","updatedTaskStatus","update","prevTasks","_","without","setTodoListed","taskIds","isOnTodoList","idsToSet","Array","isArray","setHidden","isHidden","Set","TASKS_BY_NAME","lookup","taskData","task","sanitizeTaskName","name","getTaskLookupByName","RELICS_BY_NAME","relicData","slot","slotIndex","relics","relic","relicIndex","passive","getRelicLookupByName","RELIC_ENUM_TO_NAME","ENDLESS_HARVEST","PRODUCTION_MASTER","SKILLING_PRODIGY","FAIRYS_FLIGHT","ETERNAL_JEWELLER","LAST_RECALL","QUICK_SHOT","FLUID_STRIKES","DOUBLE_CAST","TREASURE_SEEKER","UNNATURAL_SELECTION","THE_BOTANIST","INFERNAL_GATHERING","EQUILIBRIUM","DRAINING_STRIKES","EXPLODING_ATTACKS","WEAPON_SPECIALIST","updateLocalStorageFromRuneliteJson","json","runeliteImport","runeliteJsonToStorageFormat","tasksImport","parsedJson","prototype","hasOwnProperty","call","isOldVersion","Error","isValidRuneliteJson","storageFormat","filter","completed","map","match","runeliteJson","areas","area","areaName","lowerName","toLowerCase","charAt","toUpperCase","slice","toPascalCase","extractRuneliteAreas","relicName","matched","extractRuneliteRelics","taskName","replace","ManageDataModal","show","onClose","errorText","setErrorText","successTextImport","setSuccessTextImport","successTextReset","setSuccessTextReset","updated","setUpdated","runeliteImportJson","setRuneliteImportJson","loadFile","FileObject","response","loadRuneliteImport","Modal","onHide","Header","closeButton","Title","Body","Tabs","fill","defaultActiveKey","Tab","eventKey","title","className","Button","variant","onClick","Alert","onChange","onError","errMsg","href","target","rel","InputGroup","Prepend","Text","FormControl","as","event","Footer","TopNav","hideAlertBanner","setHideAlertBanner","showDataModal","setShowDataModal","location","hash","Navbar","bg","expand","Brand","src","width","height","alt","Toggle","aria-controls","Collapse","Nav","to","dismissible","Link","reload","NewsEntry","date","thumbnail","leadText","htmlContent","expanded","setExpanded","Card","Subtitle","Container","fluid","Row","Col","sm","dangerouslySetInnerHTML","__html","buttonLink","buttonText","SETTINGS_KEYS","CONTENT_WIDTH_VALUES","CONTENT_WIDTH_DEFAULT","getContentWidthClass","isColumnHidden","columnName","Homepage","newsPosts","newsPost","Calculators","CardDeck","calculatorData","skills","skill","skillData","calculators","style","textDecoration","icon","RELIC_UNLOCKS","getRelicIndices","split","isPassiveRelic","relicKey","immutablyUpdateRelicState","currentRelicState","tierId","fieldToUpdate","valueToUpdate","prevTierState","$set","isRelicUnlocked","unlockedRelics","relicId","expTable","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","75","76","77","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","reverseExpTable","0","174","276","388","512","650","801","969","1154","1358","1584","1833","2107","2411","2746","3115","3523","3973","4470","5018","5624","6291","7028","7842","8740","9730","10824","12031","13363","14833","16456","18247","20224","22406","24815","27473","30408","33648","37224","41171","45529","50339","55649","61512","67983","75127","83014","91721","101333","111945","123660","136594","150872","166636","184040","203254","224466","247886","273742","302288","333804","368599","407015","449428","496254","547953","605032","668051","737627","814445","899257","992895","1096278","1210421","1336443","1475581","1629200","1798808","1986068","2192818","2421087","2673114","2951373","3258594","3597792","3972294","4385776","4842295","5346332","5902831","6517253","7195629","7944614","8771558","9684577","10692629","11805606","13034431","getExpForLevel","level","getLevelForExp","exp","matchingLevelExp","binarySearch","arr","i","mid","Math","floor","length","midVal","parseInt","lowerVal","splice","Number","MAX_VALUE","keys","toString","getFormatters","nameFormatter","levelFormatter","amountFormatter","outputListFormatter","inputListFormatter","expFormatter","inputAmountFormatter","plannerTotalExpFormatter","deleteFormatter","cell","row","tooltip","OverlayTrigger","placement","overlay","Tooltip","Badge","pill","subtitle","rowIndex","props","boostedLevel","getBoostedLevel","isSkillingProdigy","calcExpPerAction","baseMultiplier","expMultiplier","expMultipliers","totalLevel","expActions","calcActionsRemaining","current","countMultiplier","apply","outputMultipliers","useBotanist","itemListFormatter","inputMultipliers","useDoubleCast","actionsRemaining","roundAmounts","amount","chanceMultiplier","ceil","toFixed","debouncedOnChange","debounce","Form","Control","defaultValue","closeIcon","baseExp","baseMultiplierStr","validMultipliers","numExpActions","secondaryMultiplier","equilibriumBonus","get","getEquilibriumBonusExp","round","curExp","targetExp","activityExp","expLeft","expPerAction","currentLevel","min","getBaseMultiplier","MultiplierGroup","multiplierData","globalMultiplierData","multipliers","checkedGlobalMultipliers","setCheckedGlobalMultipliers","useEffect","toCheckByDefault","multiplier","autoApply","add","getDefaultCheckedMultipliers","Check","label","checked","prevState","remove","LevelExpInput","setLevelCallback","setExpCallback","placeholder","useLevel","initialLevel","setLevel","setExp","updateByLevel","newLevel","parsedLevel","isNaN","updateByExp","newExp","parsedExp","useMultiplier","setMultipliers","globalMultipliers","setGlobalMultipliers","isGlobal","prevStateCopy","applicableIds","totalMultiplier","values","undefined","getHiscores","rsn","HiscoreLookup","setTotalLvlCallback","refreshStateCallback","username","setUsername","isLoading","setIsLoading","cachedHiscores","xp","overall","then","res","hiscores","onSubmit","preventDefault","Append","Spinner","animation","size","role","aria-hidden","SkillCalculator","targetLevel","setTotalLevel","baseExpMultiplier","setBaseExpMultiplier","inputMultiplier","outputMultiplier","useParams","useLevelFilter","setUseLevelFilter","useSkillingProdigy","setUseSkillingProdigy","setUseDoubleCast","setUseBotanist","useAreaFilter","setUseAreaFilter","includedAreas","setIncludedAreas","isCombatSkill","data","actions","filteredActions","action","some","r","applyFilters","columns","dataField","sort","headerStyle","formatter","formatExtraData","textFilter","selectFilter","options","categories","isDummyField","sortValue","classes","datum","inputs","outputs","minWidth","inline","defaultChecked","multiple","htmlSize","disabled","selectedAreas","l","selected","backgroundColor","bootstrap4","keyField","bordered","filterFactory","filterPosition","SkillPlanner","currentActivity","setCurrentActivity","activityAmount","setActivityAmount","plannedActivities","setPlannedActivities","activityOptions","allActions","category","description","activities","items","generatePlannerActivities","tableColumns","newAmount","activityIdx","findIndex","events","column","columnIndex","activity","find","totalGained","currentExp","gainedExp","expEach","expToNextLevel","calculateTotalGained","lg","search","renderOption","renderActivity","calcData","getCalcData","plusIcon","hover","rowClasses","option","snapshot","MEDIA_QUERIES","maxWidth","useScreenSize","isXs","useMediaQuery","isSm","isMd","isLg","isXl","isSizeOrSmaller","isSizeOrLarger","UnlockProgressBar","curValue","maxValue","steps","screenSize","barHeight","imgHeight","imgIcon","showEndIcons","marginClass","stepsToShow","stepPercentages","curPercentage","filledBackground","percent","stepPositions","step","transition","accomplished","RegionMap","mapImgStyle","zIndex","position","border","Image","RegionsTracker","totalTasks","setUnlockedRegionsCallback","selectedRegion","setSelectedRegion","tasksToNextRegion","currentTasks","getTasksToNextRegion","regionName","maxHeight","overflowY","regionsData","overview","travel","listItem","settlements","combatActivities","nonCombatActivities","shops","slayerTasks","questUnlocks","diaryUnlocks","diaryData","Fragment","easyTasks","medTasks","hardTasks","eliteTasks","notableDrops","RelicInfoTile","onClickEvent","isWide","additionalContent","getRelicInfo","cellStyle","RelicsTracker","totalPoints","selectedRelic","setSelectedRelic","setUnlockedRelics","pointsToNextRelic","currentPoints","getPointsToNextRelic","from","relicCategory","n","j","join","stateWithPassive","lockRelicInState","unlockRelicInState","DIFFICULTIES","DIFFICULTY_POINTS","Easy","Medium","Hard","Elite","Master","completedFormatter","isTaskComplete","checkedIcon","uncheckedIcon","pointsFormatter","points","difficulty","difficultyFormatter","isTaskHidden","manageFormatter","isTaskOnTodoList","setTaskTodo","setTaskHidden","skillsFormatter","meetsSkillRequirement","boostable","pageButtonRenderer","page","active","onPageChange","activeStyle","padding","color","display","e","pageListRenderer","pages","sizePerPageRenderer","currSizePerPage","onSizePerPageChange","isSelected","taskState","isTaskCompletable","taskReqs","tasksById","skillReq","reqSkill","reqLevel","isBoostable","filterFunctions","filterFunction","isTaskCompletableWithRegions","reqAllOfRegions","additionalAreas","allOf","reqReqion","reqOneOfRegions","oneOf","getPointsEarned","TaskTable","updateTaskStatus","taskFilters","taskTableContent","tasksByRegion","setTaskCompletion","difficulties","tableData","pagination","paginationFactory","sizePerPage","sizePerPageList","alwaysShowAllBtns","RandomTaskGenerator","refreshHiscores","onlyMetRequirements","setOnlyMetRequirements","onlyTodoList","setOnlyTodoList","currentTaskId","setCurrentTaskId","includedDifficulties","setIncludedDifficulties","useDifficultyFilter","setUseDifficultyFilter","completeButtonEnabled","setCompleteButtonEnabled","generateErrText","setGenerateErrText","borderRadius","Accordion","selectedDifficulties","taskPool","newTask","random","Divider","spacingProps","borderTop","TaskTracker","hideLockedAreas","setHideLockedAreas","selectedStatus","setSelectedStatus","showHiddenTasks","setShowHiddenTasks","hideTodoTasks","setHideTodoTasks","regionsToShow","maxCompletableTaskPoints","maxTaskPoints","Total","pointValue","getMaxCompletableTaskPoints","plannedOnTodoList","regions","todoListStatus","getTaskPointsOnTodoList","difficultyJson","numComplete","completedTasks","getCompletedTasksWithDifficulty","getCompletedTasksInArea","numEarned","margin","TaskTableWrapper","selectedArea","setSelectedArea","selectedReqs","setSelectedReqs","setIsSkillingProdigy","allFilters","prevHideLocked","prevShowHidden","prevHideTodo","activeKey","Item","setIsTodoCallback","idsToRemove","removeCompletedFromTodo","useQueryString","queryString","getQueryStringValue","useCallback","newValue","newQsValue","setQueryStringWithoutPageReload","setQueryStringValue","qsValue","newurl","protocol","host","pathname","history","pushState","path","CharacterTracker","selectedTab","onSetSelectedTab","setUnlockedRegions","onSelect","About","PluginInfo","Settings","contentWidth","setContentWidth","hiddenColumns","setHiddenColumns","Content","Pane","ComingSoon","allowFullScreen","createHashHistory","App","ReactGA","pageview","basename","exact","component","Calculator","Planner","initialize","process","gaOptions","siteSpeedSampleRate","listen","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d4a0936a.chunk.js","sourcesContent":["export const LOCALSTORAGE_KEYS = {\n    UNLOCKED_RELICS: 'unlockedRelics',\n    UNLOCKED_REGIONS: 'unlockedRegions',\n    TASKS: 'tasks',\n    FILTER_SELECTED_STATUS: 'filterSelectedStatus',\n    FILTER_HIDE_LOCKED_AREAS: 'filterHideLocked',\n    FILTER_SHOW_HIDDEN_TASKS: 'filterShowHiddenTasks',\n    FILTER_HIDE_TODO_TASKS: 'filterHideTodoTasks',\n    HIDE_ALERT_BANNER: 'hideAlertBanner',\n    USERNAME: 'hiscoresUsername',\n    GENERATED_TASK: 'generatedTask',\n};\n\nexport const SESSIONSTORAGE_KEYS = {\n    HISCORES_CACHE: 'hiscoresCache',\n};\n\nexport function getFromLocalStorage(key, initialValue, useSessionStorage = false) {\n    try {\n        let item;\n        if (useSessionStorage) {\n            item = window.sessionStorage.getItem(key);\n        } else {\n            item = window.localStorage.getItem(key);\n        }\n        return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n        console.warn(error);\n        return initialValue;\n    }\n}\n\nexport function updateLocalStorage(key, value, setValueCallback = () => {}, useSessionStorage = false) {\n    try {\n        setValueCallback(value);\n        if (useSessionStorage) {\n            window.sessionStorage.setItem(key, JSON.stringify(value));\n        } else {\n            window.localStorage.setItem(key, JSON.stringify(value));\n        }\n    } catch (error) {\n        console.warn(error);\n    }\n}\n\nexport function deleteFromLocalStorage(key, useSessionStorage = false) {\n    try {\n        if (useSessionStorage) {\n            window.sessionStorage.removeItem(key);\n        } else {\n            window.localStorage.removeItem(key);\n        }\n    } catch (error) {\n        console.warn(error);\n    }\n}\n\nexport function reloadPage() {\n    window.location.reload();\n}\n\nexport function resetLocalStorageData() {\n    localStorage.clear();\n}\n","import { useState } from 'react';\nimport { getFromLocalStorage, updateLocalStorage } from '../util/browser-util';\n\n/** originally from https://usehooks.com/useLocalStorage */\nexport default function useLocalStorage(key, initialValue, useSessionStorage = false) {\n    const getValue = () => {\n        return getFromLocalStorage(key, initialValue, useSessionStorage);\n    };\n\n    const [storedValue, setStoredValue] = useState(getValue());\n\n    const setValue = value => {\n        const valueToStore = value instanceof Function ? value(storedValue) : value;\n        updateLocalStorage(key, valueToStore, setStoredValue, useSessionStorage);\n    };\n\n    const refreshStoredValue = () => {\n        setStoredValue(getValue());\n    };\n\n    return [storedValue, setValue, refreshStoredValue];\n}\n","import { saveAs } from 'file-saver';\nimport { updateLocalStorage } from './browser-util';\n\nexport function saveLocalStorageToFile() {\n    const blob = new Blob([JSON.stringify(localStorage)], { type: 'text/plain;charset=utf-8' });\n    saveAs(blob, `osLeagueTools_backup_${Date.now()}.txt`);\n}\n\nexport async function loadLocalStorageFromFile(fileObject) {\n    let loadedText;\n    try {\n        loadedText = await fileObject.text();\n    } catch (err) {\n        return {\n            success: false,\n            message: 'Unable to load file. Please try again.',\n        };\n    }\n\n    let storageJson;\n    try {\n        storageJson = JSON.parse(loadedText);\n    } catch (err) {\n        return {\n            success: false,\n            message: 'Unable to parse file, please check the file and try again.',\n        };\n    }\n\n    localStorage.clear();\n    for (const [key, value] of Object.entries(storageJson)) {\n        updateLocalStorage(key, JSON.parse(value));\n    }\n\n    return { success: true, message: '' };\n}\n","export const MAX_TASKS = 300;\nexport const REGION_UNLOCKS = [0, 60, 140, 300];\nexport const REGIONS = [\n    'Asgarnia',\n    'Desert',\n    'Fremennik',\n    'Kandarin',\n    'Karamja',\n    'Misthalin',\n    'Morytania',\n    'Tirannwn',\n    'Wilderness',\n];\nexport const INITIAL_REGIONS_STATE = ['Misthalin', 'Karamja'];\n\nexport function isRegionUnlocked(region, unlockedRegions) {\n    return unlockedRegions.includes(region);\n}\n\nexport function getTasksToNextRegion(currentTasks) {\n    for (let i = 0; i < REGION_UNLOCKS.length; i++) {\n        if (currentTasks < REGION_UNLOCKS[i]) {\n            return REGION_UNLOCKS[i] - currentTasks;\n        }\n    }\n    return 0;\n}\n","import update from 'immutability-helper';\nimport _ from 'lodash';\nimport { LOCALSTORAGE_KEYS } from '../util/browser-util';\nimport { REGIONS } from '../util/region-util';\nimport useLocalStorage from './useLocalStorage';\n\nconst CURRENT_VERSION = 3;\n\nconst INITIAL_TASKS_STATE_V2 = {\n    version: 2,\n    tasks: [],\n    todoList: [],\n};\nexport const INITIAL_TASKS_STATE_V3 = {\n    version: 3,\n    tasks: [],\n    todoList: [],\n    hidden: [],\n};\n\nexport default function useTaskStatus() {\n    const [storedTaskStatus, setTaskStatus] = useLocalStorage(LOCALSTORAGE_KEYS.TASKS, INITIAL_TASKS_STATE_V3);\n\n    let taskStatus = storedTaskStatus;\n    if (shouldUpdateVersion(storedTaskStatus)) {\n        const updatedVersion = updateTaskStatusVersion(taskStatus, storedTaskStatus.version);\n        taskStatus = updatedVersion;\n        setTaskStatus(updatedVersion);\n    }\n\n    const setCompleted = (taskId, isComplete) => {\n        let updatedTaskStatus;\n        if (isComplete) {\n            updatedTaskStatus = update(taskStatus, {\n                tasks: prevTasks => [...prevTasks, taskId],\n            });\n        } else {\n            updatedTaskStatus = update(taskStatus, {\n                tasks: prevTasks => _.without(prevTasks, taskId),\n            });\n        }\n        setTaskStatus(updatedTaskStatus);\n    };\n\n    const setTodoListed = (taskIds, isOnTodoList) => {\n        const idsToSet = !Array.isArray(taskIds) ? [taskIds] : taskIds;\n        let updatedTaskStatus;\n        if (isOnTodoList) {\n            updatedTaskStatus = update(taskStatus, {\n                todoList: prevTasks => [...prevTasks, ...idsToSet],\n            });\n        } else {\n            updatedTaskStatus = update(taskStatus, {\n                todoList: prevTasks => _.without(prevTasks, ...idsToSet),\n            });\n        }\n        setTaskStatus(updatedTaskStatus);\n    };\n\n    const setHidden = (taskId, isHidden) => {\n        let updatedTaskStatus;\n        if (isHidden) {\n            updatedTaskStatus = update(taskStatus, {\n                hidden: prevTasks => [...prevTasks, taskId],\n            });\n        } else {\n            updatedTaskStatus = update(taskStatus, {\n                hidden: prevTasks => _.without(prevTasks, taskId),\n            });\n        }\n        setTaskStatus(updatedTaskStatus);\n    };\n\n    return [taskStatus, { setCompleted, setTodoListed, setHidden }];\n}\n\nfunction shouldUpdateVersion(taskStatus) {\n    return !taskStatus.version || taskStatus.version < CURRENT_VERSION;\n}\n\nfunction updateTaskStatusVersion(taskStatus, prevVersion) {\n    if (!prevVersion || prevVersion === 1) {\n        const updatedStatus = updateToVersion2(taskStatus);\n        return updateToVersion3(updatedStatus);\n    } else if (prevVersion === 2) {\n        return updateToVersion3(taskStatus);\n    }\n    return taskStatus;\n}\n\nfunction updateToVersion2(taskStatus) {\n    const newTaskStatus = INITIAL_TASKS_STATE_V2;\n    const regions = ['Common', ...REGIONS];\n    regions.forEach(region => {\n        const taskStatusInRegion = taskStatus[region].tasks;\n        for (const [id, status] of Object.entries(taskStatusInRegion)) {\n            if (status.complete) {\n                newTaskStatus.tasks.push(id);\n            }\n            if (status.todoList) {\n                newTaskStatus.todoList.push(id);\n            }\n        }\n    });\n    return newTaskStatus;\n}\n\nfunction updateToVersion3(taskStatus) {\n    const updatedTaskStatus = INITIAL_TASKS_STATE_V3;\n\n    // an old bug caused these to sometimes contain duplicates, make sure they've been removed\n    updatedTaskStatus.todoList = [...new Set(taskStatus.todoList)];\n    updatedTaskStatus.tasks = [...new Set(taskStatus.tasks)];\n\n    return updatedTaskStatus;\n}\n","import { getFromLocalStorage, LOCALSTORAGE_KEYS, updateLocalStorage } from './browser-util';\nimport taskData from '../resources/taskData.json';\nimport relicData from '../resources/relicData.json';\nimport { INITIAL_TASKS_STATE_V3 } from '../hooks/useTaskStatus';\n\nconst TASKS_BY_NAME = getTaskLookupByName();\nconst RELICS_BY_NAME = getRelicLookupByName();\nconst RELIC_ENUM_TO_NAME = {\n    ENDLESS_HARVEST: 'Endless Harvest',\n    PRODUCTION_MASTER: 'Production Master',\n    SKILLING_PRODIGY: 'Skilling Prodigy',\n    FAIRYS_FLIGHT: \"Fairy's Flight\",\n    ETERNAL_JEWELLER: 'Eternal Jeweller',\n    LAST_RECALL: 'Last Recall',\n    QUICK_SHOT: 'Quick Shot',\n    FLUID_STRIKES: 'Fluid Strikes',\n    DOUBLE_CAST: 'Double Cast',\n    TREASURE_SEEKER: 'Treasure Seeker',\n    UNNATURAL_SELECTION: 'Unnatural Selection',\n    THE_BOTANIST: 'Botanist',\n    INFERNAL_GATHERING: 'Infernal Gathering',\n    EQUILIBRIUM: 'Equilibrium',\n    DRAINING_STRIKES: 'Draining Strikes',\n    EXPLODING_ATTACKS: 'Exploding Attacks',\n    WEAPON_SPECIALIST: 'Weapon Specialist',\n};\n\nexport default async function updateLocalStorageFromRuneliteJson(json) {\n    try {\n        const runeliteImport = runeliteJsonToStorageFormat(json);\n        for (const [key, value] of Object.entries(runeliteImport)) {\n            if (key === 'tasks') {\n                const tasksImport = JSON.parse(value);\n                const tasks = getFromLocalStorage(LOCALSTORAGE_KEYS.TASKS, INITIAL_TASKS_STATE_V3);\n                tasks.tasks = tasksImport;\n                updateLocalStorage('tasks', tasks);\n            } else {\n                updateLocalStorage(key, JSON.parse(value));\n            }\n        }\n        return {\n            success: true,\n            message: runeliteImport,\n        };\n    } catch (e) {\n        return {\n            success: false,\n            message: `Error parsing the import data: ${e.message}`,\n        };\n    }\n}\n\nfunction getTaskLookupByName() {\n    const lookup = {};\n    taskData.tasks.forEach(task => {\n        lookup[sanitizeTaskName(task.name)] = task;\n    });\n    return lookup;\n}\n\nfunction getRelicLookupByName() {\n    const lookup = {};\n    relicData.forEach((slot, slotIndex) => {\n        slot.relics.forEach((relic, relicIndex) => {\n            lookup[relic.name] = {\n                slot: slotIndex,\n                relic: {\n                    passive: true,\n                    relic: relicIndex,\n                },\n            };\n        });\n    });\n    return lookup;\n}\n\nfunction isValidRuneliteJson(json) {\n    return (\n        Object.prototype.hasOwnProperty.call(json, 'relics') &&\n        Object.prototype.hasOwnProperty.call(json, 'areas') &&\n        Object.prototype.hasOwnProperty.call(json, 'tasks')\n    );\n}\n\nfunction isOldVersion(json) {\n    return Object.prototype.hasOwnProperty.call(json, 'unlockedRegions');\n}\n\nfunction runeliteJsonToStorageFormat(json) {\n    const parsedJson = JSON.parse(json);\n    if (isOldVersion(parsedJson)) {\n        throw new Error(\n            'Your Runelite plugin is out of date! Update your client by closing and reopening Runelite, then try importing again.'\n        );\n    } else if (!isValidRuneliteJson(parsedJson)) {\n        throw new Error('The Runelite import data is invalid.');\n    }\n\n    const storageFormat = {};\n    storageFormat[LOCALSTORAGE_KEYS.TASKS] = JSON.stringify(extractRuneliteTasks(parsedJson));\n    storageFormat[LOCALSTORAGE_KEYS.UNLOCKED_REGIONS] = JSON.stringify(extractRuneliteAreas(parsedJson));\n    storageFormat[LOCALSTORAGE_KEYS.UNLOCKED_RELICS] = JSON.stringify(extractRuneliteRelics(parsedJson));\n\n    return storageFormat;\n}\n\nfunction extractRuneliteTasks(runeliteJson) {\n    const tasks = runeliteJson.tasks\n        .filter(task => task.completed)\n        .map(task => {\n            const match = TASKS_BY_NAME[sanitizeTaskName(task.name)];\n            if (!match) {\n                throw new Error(`Task match not found for ${task.name}`);\n            }\n            return match.id;\n        });\n\n    return tasks;\n}\n\nfunction extractRuneliteAreas(runeliteJson) {\n    return runeliteJson.areas.map(area => toPascalCase(area));\n}\n\nfunction extractRuneliteRelics(runeliteJson) {\n    const relics = {};\n    runeliteJson.relics.forEach(relic => {\n        const relicName = RELIC_ENUM_TO_NAME[relic];\n        if (!relicName) {\n            throw new Error(`Relic name not found for enum: ${relic}`);\n        }\n        const matched = RELICS_BY_NAME[relicName];\n        if (!matched) {\n            throw new Error(`Relic match not found for ${relicName}`);\n        }\n        relics[matched.slot] = matched.relic;\n    });\n\n    return relics;\n}\n\nfunction toPascalCase(areaName) {\n    if (typeof areaName !== 'string') {\n        return '';\n    }\n    const lowerName = areaName.toLowerCase();\n    return lowerName.charAt(0).toUpperCase() + lowerName.slice(1);\n}\n\nfunction sanitizeTaskName(taskName) {\n    const sanitizedName = taskName.replace(/,/g, '');\n    return sanitizedName.toLowerCase();\n}\n","import React, { useState } from 'react';\nimport { Button, Modal, Alert, Tabs, Tab, InputGroup, FormControl } from 'react-bootstrap';\nimport { FilePicker } from 'react-file-picker';\nimport { saveLocalStorageToFile, loadLocalStorageFromFile } from '../util/file-util';\nimport updateLocalStorageFromRuneliteJson from '../util/runelite-util';\nimport { resetLocalStorageData } from '../util/browser-util';\n\nexport default function ManageDataModal({ show, onClose }) {\n    const [errorText, setErrorText] = useState('');\n    const [successTextImport, setSuccessTextImport] = useState('');\n    const [successTextReset, setSuccessTextReset] = useState('');\n    const [updated, setUpdated] = useState(false);\n    const [runeliteImportJson, setRuneliteImportJson] = useState({});\n\n    const pluginHubLink = 'https://github.com/runelite/runelite/wiki/Information-about-the-Plugin-Hub';\n\n    const loadFile = async FileObject => {\n        const response = await loadLocalStorageFromFile(FileObject);\n        if (response.success) {\n            setSuccessTextImport('Successfully imported character data.');\n            setErrorText('');\n            setUpdated(true);\n        } else {\n            setSuccessTextImport('');\n            setErrorText(response.message);\n        }\n    };\n\n    const resetData = () => {\n        resetLocalStorageData();\n        setUpdated(true);\n        setSuccessTextReset('Data successfully deleted');\n    };\n\n    const loadRuneliteImport = async () => {\n        const response = await updateLocalStorageFromRuneliteJson(runeliteImportJson);\n        if (response.success) {\n            setSuccessTextImport('Successfully imported character data from Runelite.');\n            setErrorText('');\n            setUpdated(true);\n        } else {\n            setSuccessTextImport('');\n            setErrorText(response.message);\n        }\n    };\n\n    return (\n        <Modal show={show} onHide={() => onClose(updated)}>\n            <Modal.Header closeButton>\n                <Modal.Title>Manage Character Data</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <Tabs fill defaultActiveKey='export'>\n                    <Tab eventKey='export' title='Export'>\n                        <div className='text-center mt-3'>\n                            <p>Export your character data to back it up or transfer to another computer:</p>\n                            <Button className='m-2' variant='dark' onClick={saveLocalStorageToFile}>\n                                Export to file\n                            </Button>\n                        </div>\n                    </Tab>\n                    <Tab eventKey='import' title='Import'>\n                        <div className='text-center mt-3'>\n                            <Alert variant='warning' className='small'>\n                                <b>Warning!</b> Importing a backup will <b>overwrite</b> your current profile.\n                            </Alert>\n                            <p>Restore a previously exported character backup:</p>\n                            <FilePicker\n                                onChange={FileObject => {\n                                    loadFile(FileObject, setSuccessTextImport, setErrorText, setUpdated);\n                                }}\n                                onError={errMsg => {\n                                    setSuccessTextImport('');\n                                    setErrorText(errMsg);\n                                }}\n                            >\n                                <Button variant='dark' className='m-2'>\n                                    Import from file\n                                </Button>\n                            </FilePicker>\n                            {errorText && <p className='text-danger small'>{errorText}</p>}\n                            {successTextImport && <p className='text-success small'>{successTextImport}</p>}\n                        </div>\n                    </Tab>\n                    <Tab eventKey='runelite' title='Runelite Import'>\n                        <div className='text-center mt-3'>\n                            <p className='text-left'>\n                                <h5>How to use:</h5>\n                                <ol>\n                                    <li>\n                                        Install the \"OsLeague\" plugin using the{' '}\n                                        <a href={pluginHubLink} target='_blank' rel='noopener noreferrer'>\n                                            plugin hub\n                                        </a>\n                                    </li>\n                                    <li>\n                                        Go to the Leagues tab ingame and open/close each interface to make sure your\n                                        data is up-to-date.{' '}\n                                        <b>NOTE: Make sure you have disabled all task filters on the ingame UI.</b>\n                                    </li>\n                                    <li>Click on the OS League Tools icon on the top toolbar to copy your data</li>\n                                    <li>Paste the copied text into the box below</li>\n                                </ol>\n                            </p>\n                            <InputGroup>\n                                <InputGroup.Prepend>\n                                    <InputGroup.Text>Paste copied data from Runelite:</InputGroup.Text>\n                                </InputGroup.Prepend>\n                                <FormControl\n                                    as='textarea'\n                                    onChange={event => setRuneliteImportJson(event.target.value)}\n                                />\n                            </InputGroup>\n                            <Button onClick={loadRuneliteImport} variant='dark' className='m-2'>\n                                Import\n                            </Button>\n                            {errorText && <p className='text-danger small'>{errorText}</p>}\n                            {successTextImport && <p className='text-success small'>{successTextImport}</p>}\n                        </div>\n                    </Tab>\n                    <Tab eventKey='reset' title='Reset'>\n                        <div className='text-center mt-3'>\n                            <Alert variant='danger' className='small'>\n                                <b>Resetting your data is irreversible.</b> Proceed with caution.\n                            </Alert>\n                            <p>Permanently delete your data and start fresh:</p>\n                            <Button className='m-2' variant='dark' onClick={resetData}>\n                                Reset all data\n                            </Button>\n                            {successTextReset && <p className='text-success small'>{successTextReset}</p>}\n                        </div>\n                    </Tab>\n                </Tabs>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button\n                    variant='secondary'\n                    onClick={() => {\n                        setErrorText('');\n                        setSuccessTextImport('');\n                        setSuccessTextReset('');\n                        onClose(updated);\n                    }}\n                >\n                    Close\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    );\n}\n","import React, { useState } from 'react';\nimport { Navbar, Nav, Alert } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport useLocalStorage from '../hooks/useLocalStorage';\nimport { LOCALSTORAGE_KEYS, reloadPage } from '../util/browser-util';\nimport ManageDataModal from './ManageDataModal';\n\nexport default function TopNav() {\n    const [hideAlertBanner, setHideAlertBanner] = useLocalStorage(LOCALSTORAGE_KEYS.HIDE_ALERT_BANNER, false);\n    const [showDataModal, setShowDataModal] = useState(false);\n\n    if (window.location.hash === '#/') {\n        return null;\n    }\n\n    return (\n        <>\n            <Navbar bg='dark' variant='dark' expand='lg'>\n                <Navbar.Brand href='/'>\n                    <img\n                        src='/img/relic-check.png'\n                        width='30'\n                        height='30'\n                        className='d-inline-block align-top mr-2'\n                        alt=''\n                    />\n                    OS League Tools\n                </Navbar.Brand>\n                <Navbar.Toggle aria-controls='responsive-navbar-nav' />\n                <Navbar.Collapse id='responsive-navbar-nav'>\n                    <Nav className='mr-auto'>\n                        <Link to='/' className='nav-link'>\n                            Home\n                        </Link>\n                        <Link to='/tracker' className='nav-link'>\n                            Character Tracker\n                        </Link>\n                        <Link to='/calculators' className='nav-link'>\n                            Calculators\n                        </Link>\n                    </Nav>\n                    <Nav>\n                        <Link to='/plugin' className='nav-link mr-2'>\n                            RuneLite Plugin\n                        </Link>\n                        <Navbar.Text onClick={() => setShowDataModal(true)} className='clickable mr-2'>\n                            Manage Data\n                        </Navbar.Text>\n                        <Link to='/settings' className='nav-link'>\n                            Settings\n                        </Link>\n                        <Link to='/about' className='nav-link'>\n                            About\n                        </Link>\n                    </Nav>\n                </Navbar.Collapse>\n            </Navbar>\n            {!hideAlertBanner && (\n                <Alert\n                    className='content-wrapper mt-3 mb-3'\n                    variant='dark'\n                    onClose={() => setHideAlertBanner(true)}\n                    dismissible\n                >\n                    <b>OS League Tools is in BETA!</b> If you find any bugs or incorrect data, or if you have\n                    feedback/suggestions, please come by the{' '}\n                    <Alert.Link href='https://discord.gg/GQ5kVyU'>discord</Alert.Link>!\n                </Alert>\n            )}\n            <ManageDataModal\n                show={showDataModal}\n                onClose={updated => {\n                    setShowDataModal(false);\n                    if (updated) {\n                        reloadPage();\n                    }\n                }}\n            />\n        </>\n    );\n}\n","import React, { useState } from 'react';\nimport { Button, Card, Container, Row, Col } from 'react-bootstrap';\n\nexport default function NewsEntry({ title, date, thumbnail, leadText, htmlContent }) {\n    const [expanded, setExpanded] = useState(false);\n\n    return (\n        <Card bg='dark' key={title} text='white' className='mt-3'>\n            <Card.Body>\n                <Card.Title>\n                    <h4>{title}</h4>\n                </Card.Title>\n                <Card.Subtitle className='mb-2 text-muted'>{date}</Card.Subtitle>\n                <Container fluid>\n                    <Row>\n                        <Col sm='auto'>\n                            {thumbnail && <img width='auto' height={100} src={thumbnail} alt={title} />}\n                        </Col>\n                        <Col>\n                            {expanded ? (\n                                <>\n                                    {/* eslint-disable-next-line react/no-danger */}\n                                    <div dangerouslySetInnerHTML={{ __html: htmlContent }} className='mb-1' />\n                                    <Button variant='outline-light' onClick={() => setExpanded(!expanded)}>\n                                        Show less\n                                    </Button>\n                                </>\n                            ) : (\n                                <>\n                                    {/* eslint-disable-next-line react/no-danger */}\n                                    <div dangerouslySetInnerHTML={{ __html: `${leadText}...` }} className='mb-1' />\n                                    <Button variant='outline-light' onClick={() => setExpanded(!expanded)}>\n                                        Show more\n                                    </Button>\n                                </>\n                            )}\n                        </Col>\n                    </Row>\n                </Container>\n            </Card.Body>\n        </Card>\n    );\n}\n","import React from 'react';\nimport { Button, Card, Col, Container, Row } from 'react-bootstrap';\n\nexport default function NewsEntry({ title, date, thumbnail, leadText, buttonLink, buttonText }) {\n    return (\n        <Card bg='dark' key={title} text='white' className='mt-3'>\n            <Card.Body>\n                <Card.Title>\n                    <h4>{title}</h4>\n                </Card.Title>\n                <Card.Subtitle className='mb-2 text-muted'>{date}</Card.Subtitle>\n                <Container fluid>\n                    <Row>\n                        <Col sm='auto'>\n                            {thumbnail && (\n                                <img width='auto' height={100} src={thumbnail} alt={title} className='mr-3' />\n                            )}\n                        </Col>\n                        <Col>\n                            {/* eslint-disable-next-line react/no-danger */}\n                            <div dangerouslySetInnerHTML={{ __html: leadText }} className='mb-2' />\n                            <Button variant='outline-light' as='a' href={buttonLink}>\n                                {buttonText}\n                            </Button>\n                        </Col>\n                    </Row>\n                </Container>\n            </Card.Body>\n        </Card>\n    );\n}\n","import { getFromLocalStorage } from './browser-util';\n\nexport const SETTINGS_KEYS = {\n    CONTENT_WIDTH: 'contentWidth',\n    HIDDEN_COLUMNS: 'hiddenColumns',\n};\n\nexport const CONTENT_WIDTH_VALUES = {\n    MAX: 'content-wrapper-full',\n    PADDED: 'content-wrapper',\n};\nexport const CONTENT_WIDTH_DEFAULT = CONTENT_WIDTH_VALUES.PADDED;\n\nexport function getContentWidthClass() {\n    return getFromLocalStorage(SETTINGS_KEYS.CONTENT_WIDTH, CONTENT_WIDTH_DEFAULT);\n}\n\nexport function isColumnHidden(columnName) {\n    return getFromLocalStorage(SETTINGS_KEYS.HIDDEN_COLUMNS, []).includes(columnName);\n}\n","import React from 'react';\nimport BlogEntry from '../components/BlogEntry';\nimport NewsEntry from '../components/NewsEntry';\nimport newsPosts from '../resources/newsPosts.json';\nimport { getContentWidthClass } from '../util/settings-util';\n\nexport default function Homepage() {\n    return (\n        <div className={getContentWidthClass()}>\n            <h1 className='mt-2 light-text'>News & Updates</h1>\n            {newsPosts.map(newsPost =>\n                newsPost.type === 'news' ? (\n                    <NewsEntry\n                        key={newsPost.title}\n                        title={newsPost.title}\n                        date={newsPost.date}\n                        leadText={newsPost.leadText}\n                        thumbnail={newsPost.thumbnail}\n                        buttonLink={newsPost.buttonLink}\n                        buttonText={newsPost.buttonText}\n                    />\n                ) : (\n                    <BlogEntry\n                        key={newsPost.title}\n                        title={newsPost.title}\n                        date={newsPost.date}\n                        thumbnail={newsPost.thumbnail}\n                        leadText={newsPost.leadText}\n                        htmlContent={newsPost.htmlContent}\n                    />\n                )\n            )}\n        </div>\n    );\n}\n","import React from 'react';\nimport { Card, CardDeck } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport calculatorData from '../resources/calculatorData.json';\nimport { getContentWidthClass } from '../util/settings-util';\n\nexport default function Calculators() {\n    return (\n        <div className={getContentWidthClass()}>\n            <CardDeck>\n                <Card bg='dark' text='white' className='mt-2 mb-2'>\n                    <h1 className='mt-2 light-text text-center'>Skill Calculators</h1>\n                    <div className='content-center'>\n                        <p className='mb-2 text-center'>\n                            Input a target level or exp, and find out how many actions you need to get there.\n                        </p>\n                        <ul className='calc-list'>\n                            {calculatorData.skills.map(skill => {\n                                const skillData = calculatorData.calculators[skill];\n                                if (!skillData) {\n                                    return null;\n                                }\n                                return (\n                                    <li className='mt-2' key={skillData.name}>\n                                        <Link\n                                            to={`/calculators/${skill}`}\n                                            className='text-light'\n                                            key={skill}\n                                            style={{ textDecoration: 'none' }}\n                                        >\n                                            <img src={skillData.icon} alt={skillData.name} />\n                                            {` ${skillData.name}`}\n                                        </Link>\n                                    </li>\n                                );\n                            })}\n                        </ul>\n                    </div>\n                </Card>\n                <Card bg='dark' text='white' className='mt-2 mb-2'>\n                    <h1 className='mt-2 light-text text-center'>Skill Planners</h1>\n                    <div className='content-center'>\n                        <p className='mb-2 text-center'>\n                            Input how many actions you plan to do, and find out how much exp it'll give you.\n                        </p>\n                        <ul className='calc-list'>\n                            {calculatorData.skills.map(skill => {\n                                const skillData = calculatorData.calculators[skill];\n                                if (!skillData) {\n                                    return null;\n                                }\n                                return (\n                                    <li className='mt-2' key={skillData.name}>\n                                        <Link\n                                            to={`/planners/${skill}`}\n                                            className='text-light'\n                                            key={skill}\n                                            style={{ textDecoration: 'none' }}\n                                        >\n                                            <img src={skillData.icon} alt={skillData.name} />\n                                            {` ${skillData.name}`}\n                                        </Link>\n                                    </li>\n                                );\n                            })}\n                        </ul>\n                    </div>\n                </Card>\n            </CardDeck>\n            {/* <Card bg='dark' text='white'>\n                <h1 className='mt-2 light-text text-center'>Other Calculators</h1>\n                <div className='m-3 text-center'>Coming soon!</div>\n            </Card> */}\n        </div>\n    );\n}\n","import update from 'immutability-helper';\nimport relicData from '../resources/relicData.json';\nimport { LOCALSTORAGE_KEYS, getFromLocalStorage } from './browser-util';\n\nexport const MAX_POINTS = 15000;\nexport const RELIC_UNLOCKS = [0, 500, 2000, 4000, 7500, 15000];\n\nexport function getRelicKey(tierId, relicId) {\n    return [tierId + 1, relicId + 1].join(',');\n}\n\nexport function getRelicIndices(key) {\n    const [tierId, relicId] = key.split(',');\n    return [tierId - 1, relicId - 1];\n}\n\nexport function getRelicInfo(relicKey) {\n    const [tierId, relicId] = getRelicIndices(relicKey);\n    return relicData[tierId].relics[relicId];\n}\n\nexport function unlockRelicInState(currentRelicState, relicKey) {\n    const [tierId, relicId] = getRelicIndices(relicKey);\n\n    const stateWithPassive = immutablyUpdateRelicState(currentRelicState, tierId, 'passive', true);\n    return immutablyUpdateRelicState(stateWithPassive, tierId, 'relic', relicId);\n}\n\nexport function lockRelicInState(currentRelicState, relicKey) {\n    const [tierId] = getRelicIndices(relicKey);\n\n    const stateWithPassive = immutablyUpdateRelicState(currentRelicState, tierId, 'passive', false);\n    return immutablyUpdateRelicState(stateWithPassive, tierId, 'relic', -1);\n}\n\nexport function isPassiveRelic(relicKey) {\n    const [, relicId] = getRelicIndices(relicKey);\n    return relicId === 3;\n}\n\nfunction immutablyUpdateRelicState(currentRelicState, tierId, fieldToUpdate, valueToUpdate) {\n    return update(currentRelicState, {\n        [tierId]: prevTierState => update(prevTierState || {}, { [fieldToUpdate]: { $set: valueToUpdate } }),\n    });\n}\n\nexport function isRelicUnlocked(relicKey, unlockedRelics) {\n    if (!relicKey) {\n        return false;\n    }\n\n    const [tierId, relicId] = getRelicIndices(relicKey);\n    const relics = unlockedRelics || getFromLocalStorage(LOCALSTORAGE_KEYS.UNLOCKED_RELICS, {});\n\n    if (relicId === 3) {\n        return relics && relics[tierId] && relics[tierId].passive;\n    }\n    return relics && relics[tierId] && relics[tierId].relic === relicId;\n}\n\nexport function getPointsToNextRelic(currentPoints) {\n    for (let i = 0; i < RELIC_UNLOCKS.length; i++) {\n        if (currentPoints < RELIC_UNLOCKS[i]) {\n            return RELIC_UNLOCKS[i] - currentPoints;\n        }\n    }\n    return 0;\n}\n","const expTable = {\n    1: 0,\n    2: 83,\n    3: 174,\n    4: 276,\n    5: 388,\n    6: 512,\n    7: 650,\n    8: 801,\n    9: 969,\n    10: 1154,\n    11: 1358,\n    12: 1584,\n    13: 1833,\n    14: 2107,\n    15: 2411,\n    16: 2746,\n    17: 3115,\n    18: 3523,\n    19: 3973,\n    20: 4470,\n    21: 5018,\n    22: 5624,\n    23: 6291,\n    24: 7028,\n    25: 7842,\n    26: 8740,\n    27: 9730,\n    28: 10824,\n    29: 12031,\n    30: 13363,\n    31: 14833,\n    32: 16456,\n    33: 18247,\n    34: 20224,\n    35: 22406,\n    36: 24815,\n    37: 27473,\n    38: 30408,\n    39: 33648,\n    40: 37224,\n    41: 41171,\n    42: 45529,\n    43: 50339,\n    44: 55649,\n    45: 61512,\n    46: 67983,\n    47: 75127,\n    48: 83014,\n    49: 91721,\n    50: 101333,\n    51: 111945,\n    52: 123660,\n    53: 136594,\n    54: 150872,\n    55: 166636,\n    56: 184040,\n    57: 203254,\n    58: 224466,\n    59: 247886,\n    60: 273742,\n    61: 302288,\n    62: 333804,\n    63: 368599,\n    64: 407015,\n    65: 449428,\n    66: 496254,\n    67: 547953,\n    68: 605032,\n    69: 668051,\n    70: 737627,\n    71: 814445,\n    72: 899257,\n    73: 992895,\n    74: 1096278,\n    75: 1210421,\n    76: 1336443,\n    77: 1475581,\n    78: 1629200,\n    79: 1798808,\n    80: 1986068,\n    81: 2192818,\n    82: 2421087,\n    83: 2673114,\n    84: 2951373,\n    85: 3258594,\n    86: 3597792,\n    87: 3972294,\n    88: 4385776,\n    89: 4842295,\n    90: 5346332,\n    91: 5902831,\n    92: 6517253,\n    93: 7195629,\n    94: 7944614,\n    95: 8771558,\n    96: 9684577,\n    97: 10692629,\n    98: 11805606,\n    99: 13034431,\n};\n\nconst reverseExpTable = {\n    0: 1,\n    83: 2,\n    174: 3,\n    276: 4,\n    388: 5,\n    512: 6,\n    650: 7,\n    801: 8,\n    969: 9,\n    1154: 10,\n    1358: 11,\n    1584: 12,\n    1833: 13,\n    2107: 14,\n    2411: 15,\n    2746: 16,\n    3115: 17,\n    3523: 18,\n    3973: 19,\n    4470: 20,\n    5018: 21,\n    5624: 22,\n    6291: 23,\n    7028: 24,\n    7842: 25,\n    8740: 26,\n    9730: 27,\n    10824: 28,\n    12031: 29,\n    13363: 30,\n    14833: 31,\n    16456: 32,\n    18247: 33,\n    20224: 34,\n    22406: 35,\n    24815: 36,\n    27473: 37,\n    30408: 38,\n    33648: 39,\n    37224: 40,\n    41171: 41,\n    45529: 42,\n    50339: 43,\n    55649: 44,\n    61512: 45,\n    67983: 46,\n    75127: 47,\n    83014: 48,\n    91721: 49,\n    101333: 50,\n    111945: 51,\n    123660: 52,\n    136594: 53,\n    150872: 54,\n    166636: 55,\n    184040: 56,\n    203254: 57,\n    224466: 58,\n    247886: 59,\n    273742: 60,\n    302288: 61,\n    333804: 62,\n    368599: 63,\n    407015: 64,\n    449428: 65,\n    496254: 66,\n    547953: 67,\n    605032: 68,\n    668051: 69,\n    737627: 70,\n    814445: 71,\n    899257: 72,\n    992895: 73,\n    1096278: 74,\n    1210421: 75,\n    1336443: 76,\n    1475581: 77,\n    1629200: 78,\n    1798808: 79,\n    1986068: 80,\n    2192818: 81,\n    2421087: 82,\n    2673114: 83,\n    2951373: 84,\n    3258594: 85,\n    3597792: 86,\n    3972294: 87,\n    4385776: 88,\n    4842295: 89,\n    5346332: 90,\n    5902831: 91,\n    6517253: 92,\n    7195629: 93,\n    7944614: 94,\n    8771558: 95,\n    9684577: 96,\n    10692629: 97,\n    11805606: 98,\n    13034431: 99,\n};\n\nexport function getExpForLevel(level) {\n    if (level < 1) {\n        return 0;\n    } else if (level > 99) {\n        return expTable[99];\n    }\n\n    return expTable[level];\n}\n\nexport function getLevelForExp(exp) {\n    if (exp <= expTable[1]) {\n        return 1;\n    } else if (exp >= expTable[99]) {\n        return 99;\n    }\n\n    const matchingLevelExp = binarySearch(Object.keys(reverseExpTable), exp);\n    return reverseExpTable[matchingLevelExp.toString()];\n}\n\nfunction binarySearch(arr, i) {\n    const mid = Math.floor(arr.length / 2);\n    const midVal = parseInt(arr[mid], 10);\n    const lowerVal = mid > 0 ? parseInt(arr[mid - 1], 10) : 0;\n\n    if (midVal === i) {\n        return midVal;\n    } else if (midVal > i && lowerVal < i) {\n        return lowerVal;\n    } else if (midVal < i && arr.length > 1) {\n        return binarySearch(arr.splice(mid, Number.MAX_VALUE), i);\n    } else if (midVal > i && arr.length > 1) {\n        return binarySearch(arr.splice(0, mid), i);\n    }\n    return -1;\n}\n","import React from 'react';\nimport { OverlayTrigger, Badge, Tooltip, Form } from 'react-bootstrap';\nimport { Icon } from '@iconify/react';\nimport closeIcon from '@iconify/icons-mdi/close';\nimport _ from 'lodash';\nimport { isRelicUnlocked } from './relic-util';\nimport calculatorData from '../resources/calculatorData.json';\nimport { getExpForLevel, getLevelForExp } from './exp-table';\n\nexport function getFormatters() {\n    return {\n        nameFormatter,\n        levelFormatter,\n        amountFormatter,\n        outputListFormatter,\n        inputListFormatter,\n        expFormatter,\n        inputAmountFormatter,\n        plannerTotalExpFormatter,\n        deleteFormatter,\n    };\n}\n\nfunction nameFormatter(cell, row) {\n    return (\n        <>\n            {row.icon && <img src={row.icon} alt='' />}\n            {` ${cell}`}\n            {row.tooltip && (\n                <OverlayTrigger placement='top' overlay={<Tooltip>{row.tooltip}</Tooltip>}>\n                    <Badge variant='dark' pill>\n                        ...\n                    </Badge>\n                </OverlayTrigger>\n            )}\n            <div className='small'>{row.subtitle}</div>\n        </>\n    );\n}\n\nfunction levelFormatter(cell, row, rowIndex, props) {\n    const boostedLevel = getBoostedLevel(props.level, props.isSkillingProdigy);\n    return <div className={cell <= boostedLevel ? 'unlocked' : 'locked'}>{cell}</div>;\n}\n\nfunction expFormatter(cell, row, rowIndex, props) {\n    return calcExpPerAction(\n        cell,\n        props.baseMultiplier,\n        props.expMultiplier,\n        row.expMultipliers,\n        props.totalLevel,\n        row.expActions\n    );\n}\n\nfunction amountFormatter(cell, row, rowIndex, props) {\n    return calcActionsRemaining(\n        props.current,\n        props.target,\n        row.exp,\n        props.baseMultiplier,\n        props.expMultiplier,\n        row.expMultipliers,\n        props.totalLevel,\n        row.expActions\n    );\n}\n\nfunction outputListFormatter(cell, row, rowIndex, props) {\n    let countMultiplier = props.countMultiplier.apply(row.outputMultipliers);\n    if (props.useBotanist) {\n        countMultiplier *= 2;\n    }\n    const actionsRemaining = calcActionsRemaining(\n        props.current,\n        props.target,\n        row.exp,\n        props.baseMultiplier,\n        props.expMultiplier,\n        row.expMultipliers,\n        props.totalLevel,\n        row.expActions\n    );\n    return itemListFormatter(cell, countMultiplier, actionsRemaining);\n}\n\nfunction inputListFormatter(cell, row, rowIndex, props) {\n    const countMultiplier = props.countMultiplier.apply(row.inputMultipliers);\n    const actionsRemaining = calcActionsRemaining(\n        props.current,\n        props.target,\n        row.exp,\n        props.baseMultiplier,\n        props.expMultiplier,\n        row.expMultipliers,\n        props.totalLevel,\n        row.expActions\n    );\n    return itemListFormatter(cell, countMultiplier, actionsRemaining, true, props.useDoubleCast);\n}\n\nfunction itemListFormatter(cell, countMultiplier, actionsRemaining, roundAmounts = false, useDoubleCast = false) {\n    return (\n        <ul className='mb-0'>\n            {cell.map(item => {\n                if (item.amount) {\n                    const chanceMultiplier = useDoubleCast && item.name.includes('rune') ? 0.1 : 1;\n                    let amount = actionsRemaining * item.amount * chanceMultiplier * countMultiplier;\n                    amount = roundAmounts ? Math.ceil(amount) : +amount.toFixed(2);\n                    return <li key={item.name}>{`${amount} ${item.name}`}</li>;\n                }\n                return <li key={item.name}>{item.name}</li>;\n            })}\n        </ul>\n    );\n}\n\nfunction inputAmountFormatter(cell, row, rowIndex, { onChange }) {\n    const debouncedOnChange = _.debounce(onChange, 700);\n    return (\n        <Form.Control\n            defaultValue={row.amount}\n            onChange={event => debouncedOnChange(row.id, event.target.value)}\n            style={{ width: '100px' }}\n            type='number'\n        />\n    );\n}\n\nfunction plannerTotalExpFormatter(cell, row, rowIndex, { baseMultiplier, expMultiplier, totalLevel }) {\n    const expEach = calcExpPerAction(\n        row.exp,\n        baseMultiplier,\n        expMultiplier,\n        row.expMultipliers,\n        totalLevel,\n        row.expActions\n    );\n    const totalGained = expEach * row.amount;\n    return +totalGained.toFixed(2);\n}\n\nfunction deleteFormatter() {\n    return <Icon icon={closeIcon} width='20px' height='20px' />;\n}\n\nfunction calcExpPerAction(baseExp, baseMultiplierStr, expMultiplier, validMultipliers, totalLevel, numExpActions) {\n    const baseMultiplier = parseInt(baseMultiplierStr, 10);\n    const secondaryMultiplier = baseMultiplier * expMultiplier.apply(validMultipliers);\n    const equilibriumBonus = getEquilibriumBonusExp(expMultiplier, totalLevel, numExpActions);\n    return Math.round((baseExp * secondaryMultiplier + equilibriumBonus) * 10) / 10;\n}\n\nfunction calcActionsRemaining(\n    curExp,\n    targetExp,\n    activityExp,\n    baseMultiplierStr,\n    expMultiplier,\n    validMultipliers,\n    totalLevel,\n    numExpActions\n) {\n    const expLeft = targetExp - curExp;\n    const expPerAction = calcExpPerAction(\n        activityExp,\n        baseMultiplierStr,\n        expMultiplier,\n        validMultipliers,\n        totalLevel,\n        numExpActions\n    );\n    return Math.ceil(expLeft / expPerAction);\n}\n\nexport function getBoostedLevel(currentLevel, isSkillingProdigy) {\n    return isSkillingProdigy ? Math.min(99, currentLevel + 12) : currentLevel;\n}\n\nfunction getEquilibriumBonusExp(expMultiplier, totalLevel, numExpActions) {\n    if (!Object.prototype.hasOwnProperty.call(expMultiplier.get(), 'G0')) {\n        return 0;\n    }\n    return totalLevel * 0.1 * numExpActions;\n}\n\nexport function getBaseMultiplier() {\n    if (isRelicUnlocked('6,4')) {\n        return '16';\n    } else if (isRelicUnlocked('4,4')) {\n        return '12';\n    } else if (isRelicUnlocked('2,4')) {\n        return '8';\n    }\n    return '5';\n}\n\nexport function getDefaultCheckedMultipliers(globalMultiplierData, multipliers) {\n    const toCheckByDefault = [];\n    globalMultiplierData.forEach(multiplier => {\n        if (multiplier.autoApply) {\n            const checkByDefault = multiplier.autoApply === 'always' || isRelicUnlocked(multiplier.autoApply);\n            if (checkByDefault) {\n                toCheckByDefault.push(multiplier.id);\n                multipliers.add(multiplier.id, multiplier.multiplier, true);\n            }\n        }\n    });\n    return toCheckByDefault;\n}\n\nexport function generatePlannerActivities(skill) {\n    const allActions = {};\n    calculatorData.calculators[skill].actions.forEach(action => {\n        if (allActions[action.category] !== undefined) {\n            allActions[action.category].push({\n                name: action.name,\n                description: action.subtitle,\n                value: action.id,\n                icon: action.icon,\n            });\n        } else {\n            allActions[action.category] = [\n                {\n                    name: action.name,\n                    description: action.subtitle,\n                    value: action.id,\n                    icon: action.icon,\n                },\n            ];\n        }\n    });\n\n    const activities = [];\n    calculatorData.calculators[skill].categories.forEach(category => {\n        activities.push({\n            type: 'group',\n            name: category.label,\n            items: allActions[category.label],\n        });\n    });\n    return activities;\n}\n\nexport function getCalcData(skill, id) {\n    return calculatorData.calculators[skill].actions.find(action => action.id === id);\n}\n\nexport function calculateTotalGained(currentExp, plannedActivities, baseMultiplier, expMultiplier, totalLevel) {\n    let gainedExp = 0;\n    plannedActivities.forEach(activity => {\n        const expEach = calcExpPerAction(\n            activity.exp,\n            baseMultiplier,\n            expMultiplier,\n            activity.expMultipliers,\n            totalLevel,\n            activity.expActions\n        );\n        gainedExp += expEach * activity.amount;\n    });\n\n    gainedExp = Math.floor(gainedExp);\n    const newExp = currentExp + gainedExp;\n    const newLevel = getLevelForExp(newExp);\n    const expToNextLevel = getExpForLevel(newLevel + 1) - newExp;\n\n    return {\n        exp: newExp,\n        level: newLevel,\n        gainedExp,\n        expToNextLevel,\n    };\n}\n","import React, { useEffect, useState } from 'react';\nimport { Form } from 'react-bootstrap';\nimport _ from 'lodash';\nimport { getDefaultCheckedMultipliers } from '../util/calculator-util';\n\nexport default function MultiplierGroup({ title, multiplierData, globalMultiplierData = [], multipliers }) {\n    const [checkedGlobalMultipliers, setCheckedGlobalMultipliers] = useState([]);\n\n    useEffect(() => {\n        const toCheckByDefault = getDefaultCheckedMultipliers(globalMultiplierData, multipliers);\n        setCheckedGlobalMultipliers(toCheckByDefault);\n        // only want this to run a single time on first load, so don't depend on anything here\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    if (multiplierData.length === 0 && globalMultiplierData.length === 0) {\n        return null;\n    }\n\n    return (\n        <>\n            <h4>{`${title}:`}</h4>\n            <div className='pl-2 pb-2'>\n                {globalMultiplierData.length > 0 &&\n                    globalMultiplierData.map(multiplier => {\n                        return (\n                            <Form.Check\n                                label={multiplier.name}\n                                key={multiplier.id}\n                                checked={checkedGlobalMultipliers.includes(multiplier.id)}\n                                onChange={event => {\n                                    if (event.target.checked) {\n                                        setCheckedGlobalMultipliers(prevState => [...prevState, multiplier.id]);\n                                        multipliers.add(multiplier.id, multiplier.multiplier, true);\n                                    } else {\n                                        setCheckedGlobalMultipliers(prevState => _.without(prevState, multiplier.id));\n                                        multipliers.remove(multiplier.id, true);\n                                    }\n                                }}\n                            />\n                        );\n                    })}\n                {multiplierData.length > 0 &&\n                    multiplierData.map(multiplier => {\n                        return (\n                            <Form.Check\n                                label={multiplier.name}\n                                key={multiplier.id}\n                                onChange={event => {\n                                    if (event.target.checked) {\n                                        multipliers.add(multiplier.id, multiplier.multiplier);\n                                    } else {\n                                        multipliers.remove(multiplier.id);\n                                    }\n                                }}\n                            />\n                        );\n                    })}\n            </div>\n        </>\n    );\n}\n","import React from 'react';\nimport { InputGroup, FormControl } from 'react-bootstrap';\n\nexport default function LevelExpInput({ title, level, exp, setLevelCallback, setExpCallback }) {\n    return (\n        <InputGroup className='p-3'>\n            <InputGroup.Prepend>\n                <InputGroup.Text>{title}</InputGroup.Text>\n            </InputGroup.Prepend>\n            <FormControl placeholder='Level' value={level} onChange={event => setLevelCallback(event.target.value)} />\n            <FormControl placeholder='Exp' value={exp} onChange={event => setExpCallback(event.target.value)} />\n        </InputGroup>\n    );\n}\n","import { useState } from 'react';\nimport { getExpForLevel, getLevelForExp } from '../util/exp-table';\n\nexport default function useLevel(initialLevel) {\n    const [level, setLevel] = useState(initialLevel);\n    const [exp, setExp] = useState(getExpForLevel(initialLevel));\n\n    const updateByLevel = newLevel => {\n        const parsedLevel = parseInt(newLevel, 10);\n        if (Number.isNaN(parsedLevel)) {\n            setLevel(newLevel);\n            setExp(0);\n        } else {\n            setLevel(parsedLevel);\n            setExp(getExpForLevel(parsedLevel));\n        }\n    };\n    const updateByExp = newExp => {\n        const parsedExp = parseInt(newExp, 10);\n        if (Number.isNaN(parsedExp)) {\n            setExp(newExp);\n            setLevel(0);\n        } else {\n            setExp(parsedExp);\n            setLevel(getLevelForExp(parsedExp));\n        }\n    };\n\n    return { level, exp, updateByLevel, updateByExp };\n}\n","import { useState } from 'react';\nimport update from 'immutability-helper';\n\nexport default function useMultiplier() {\n    const [multipliers, setMultipliers] = useState({});\n    const [globalMultipliers, setGlobalMultipliers] = useState({});\n\n    const addMultiplier = (id, amount, isGlobal = false) => {\n        if (isGlobal) {\n            setGlobalMultipliers(\n                update(globalMultipliers, {\n                    [id]: { $set: amount },\n                })\n            );\n        } else {\n            setMultipliers(\n                update(globalMultipliers, {\n                    [id]: { $set: amount },\n                })\n            );\n        }\n    };\n\n    const removeMultiplier = (id, isGlobal = false) => {\n        if (isGlobal) {\n            setGlobalMultipliers(prevState => {\n                const prevStateCopy = { ...prevState };\n                delete prevStateCopy[id];\n                return prevStateCopy;\n            });\n        } else {\n            setMultipliers(prevState => {\n                const prevStateCopy = { ...prevState };\n                delete prevStateCopy[id];\n                return prevStateCopy;\n            });\n        }\n    };\n\n    const applyMultipliers = applicableIds => {\n        let totalMultiplier = 1;\n        Object.values(globalMultipliers).forEach(multiplier => {\n            totalMultiplier *= multiplier;\n        });\n        applicableIds.forEach(id => {\n            if (multipliers[id] !== undefined) {\n                totalMultiplier *= multipliers[id];\n            }\n        });\n        return totalMultiplier;\n    };\n\n    const getMultipliers = () => {\n        return {\n            ...multipliers,\n            ...globalMultipliers,\n        };\n    };\n\n    const clearMultipliers = () => {\n        setMultipliers({});\n    };\n\n    return {\n        add: addMultiplier,\n        remove: removeMultiplier,\n        apply: applyMultipliers,\n        get: getMultipliers,\n        clear: clearMultipliers,\n    };\n}\n","import {\n    // deleteFromLocalStorage,\n    getFromLocalStorage,\n    SESSIONSTORAGE_KEYS,\n    // updateLocalStorage,\n} from '../util/browser-util';\n\n// const HOSTNAME = 'https://os-league-tools-api.herokuapp.com';\n\n// eslint-disable-next-line no-unused-vars\nexport async function getHiscores(rsn) {\n    // const url = `${HOSTNAME}/hiscores/${rsn}`;\n    // let hiscores;\n    // await fetch(url)\n    //     .then(res => res.json())\n    //     .then(\n    //         result => {\n    //             if (result.status && result.status === 404) {\n    //                 hiscores = {\n    //                     success: false,\n    //                     message: `Username \"${rsn}\" not found.`,\n    //                 };\n    //                 deleteFromLocalStorage(SESSIONSTORAGE_KEYS.HISCORES_CACHE, true);\n    //             } else {\n    //                 hiscores = {\n    //                     success: true,\n    //                     hiscores: result,\n    //                 };\n    //                 updateLocalStorage(SESSIONSTORAGE_KEYS.HISCORES_CACHE, result, () => {}, true);\n    //             }\n    //         },\n    //         error => {\n    //             console.warn(error);\n    //             hiscores = {\n    //                 success: false,\n    //                 message: `Unable to retrieve hiscores, please try again later.`,\n    //             };\n    //             deleteFromLocalStorage(SESSIONSTORAGE_KEYS.HISCORES_CACHE, true);\n    //         }\n    //     );\n    // return hiscores;\n    return {\n        success: false,\n        message: `Hiscores functionality is currently unavailable due to website construction. Sorry for the inconvenience!`,\n    };\n}\n\nexport function getCachedHiscores() {\n    return getFromLocalStorage(SESSIONSTORAGE_KEYS.HISCORES_CACHE, null, true);\n}\n","import React, { useEffect, useState } from 'react';\nimport { InputGroup, FormControl, Button, Spinner, Form } from 'react-bootstrap';\nimport { getCachedHiscores, getHiscores } from '../client/hiscores-client';\nimport useLocalStorage from '../hooks/useLocalStorage';\nimport { LOCALSTORAGE_KEYS } from '../util/browser-util';\n\nexport default function HiscoreLookup({\n    skill,\n    setExpCallback = () => {},\n    setTotalLvlCallback = () => {},\n    refreshStateCallback = () => {},\n}) {\n    const [username, setUsername] = useLocalStorage(LOCALSTORAGE_KEYS.USERNAME, '');\n    const [errorText, setErrorText] = useState('');\n    const [isLoading, setIsLoading] = useState(false);\n\n    useEffect(() => {\n        const cachedHiscores = getCachedHiscores();\n        if (cachedHiscores) {\n            if (skill) {\n                setExpCallback(cachedHiscores.skills[skill].xp);\n                setTotalLvlCallback(cachedHiscores.skills.overall.level);\n            }\n        } else if (username) {\n            setIsLoading(true);\n            getHiscores(username).then(res => {\n                if (res.success) {\n                    if (skill) {\n                        setExpCallback(res.hiscores.skills[skill].xp);\n                        setTotalLvlCallback(res.hiscores.skills.overall.level);\n                    }\n                    setIsLoading(false);\n                } else {\n                    setErrorText(res.message);\n                    setIsLoading(false);\n                }\n                refreshStateCallback();\n            });\n        }\n        // only want this to run once on first load\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const doHiscoresLookup = () => {\n        setIsLoading(true);\n        setErrorText('');\n        if (username) {\n            getHiscores(username).then(res => {\n                if (res.success) {\n                    if (skill) {\n                        setExpCallback(res.hiscores.skills[skill].xp);\n                        setTotalLvlCallback(res.hiscores.skills.overall.level);\n                    }\n                    setIsLoading(false);\n                } else {\n                    setErrorText(res.message);\n                    setIsLoading(false);\n                }\n                refreshStateCallback();\n            });\n        } else {\n            setErrorText('Please enter a username.');\n            setIsLoading(false);\n        }\n    };\n\n    return (\n        <div className='p-3'>\n            <Form onSubmit={event => event.preventDefault()}>\n                <InputGroup>\n                    <FormControl\n                        placeholder='Username'\n                        value={username}\n                        onChange={event => setUsername(event.target.value)}\n                    />\n                    <InputGroup.Append>\n                        <Button variant='outline-light' type='submit' onClick={() => doHiscoresLookup()}>\n                            {isLoading && (\n                                <Spinner\n                                    as='span'\n                                    animation='border'\n                                    size='sm'\n                                    role='status'\n                                    aria-hidden='true'\n                                    className='mr-1'\n                                />\n                            )}\n                            Lookup\n                        </Button>\n                    </InputGroup.Append>\n                </InputGroup>\n            </Form>\n            {errorText && <div className='text-danger small'>{errorText}</div>}\n        </div>\n    );\n}\n","import React, { useState, useEffect } from 'react';\nimport { Card, CardDeck, Form, FormControl, InputGroup } from 'react-bootstrap';\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport { useParams } from 'react-router';\nimport DoubleScrollbar from 'react-shadowed-double-scrollbar';\nimport filterFactory, { textFilter, selectFilter } from 'react-bootstrap-table2-filter';\nimport { INITIAL_REGIONS_STATE, REGIONS } from '../util/region-util';\nimport { getFormatters, getBoostedLevel, getBaseMultiplier } from '../util/calculator-util';\nimport calculatorData from '../resources/calculatorData.json';\nimport MultiplierGroup from '../components/MultiplierGroup';\nimport LevelExpInput from '../components/LevelExpInput';\nimport useLevel from '../hooks/useLevel';\nimport useMultiplier from '../hooks/useMultiplier';\nimport { isRelicUnlocked } from '../util/relic-util';\nimport { getFromLocalStorage, LOCALSTORAGE_KEYS } from '../util/browser-util';\nimport HiscoreLookup from '../components/HiscoreLookup';\nimport { getLevelForExp } from '../util/exp-table';\nimport { getContentWidthClass } from '../util/settings-util';\n\nexport default function SkillCalculator() {\n    const currentLevel = useLevel(1);\n    const targetLevel = useLevel(Math.min(currentLevel.level + 1, 99));\n    const [totalLevel, setTotalLevel] = useState(1000);\n    const [baseExpMultiplier, setBaseExpMultiplier] = useState('5');\n    const expMultiplier = useMultiplier();\n    const inputMultiplier = useMultiplier();\n    const outputMultiplier = useMultiplier();\n    const { skill } = useParams();\n    const [useLevelFilter, setUseLevelFilter] = useState(false);\n    const [useSkillingProdigy, setUseSkillingProdigy] = useState(isRelicUnlocked('1,3'));\n    const [useDoubleCast, setUseDoubleCast] = useState(isRelicUnlocked('3,3') && skill === 'magic');\n    const [useBotanist, setUseBotanist] = useState(isRelicUnlocked('5,1') && skill === 'farming');\n    const [useAreaFilter, setUseAreaFilter] = useState(true);\n    const [includedAreas, setIncludedAreas] = useState(\n        getFromLocalStorage(LOCALSTORAGE_KEYS.UNLOCKED_REGIONS, INITIAL_REGIONS_STATE)\n    );\n\n    let skillData;\n    useEffect(() => {\n        if (!skillData) {\n            return;\n        }\n\n        setBaseExpMultiplier(getBaseMultiplier());\n        // only want this to run a single time on first load, so don't depend on anything here\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    useEffect(() => {\n        expMultiplier.clear();\n        inputMultiplier.clear();\n        outputMultiplier.clear();\n        setUseSkillingProdigy(isRelicUnlocked('1,3') && !skillData.isCombatSkill);\n        setUseDoubleCast(isRelicUnlocked('3,3') && skill === 'magic');\n        setUseBotanist(isRelicUnlocked('5,1') && skill === 'farming');\n    }, [skill]);\n\n    skillData = calculatorData.calculators[skill];\n    if (!skillData) {\n        return (\n            <h4 className='mt-5 light-text text-center'>\n                {`No calculator found for \"${skill}\". Check your link and try again.`}\n            </h4>\n        );\n    }\n\n    const {\n        nameFormatter,\n        levelFormatter,\n        amountFormatter,\n        outputListFormatter,\n        inputListFormatter,\n        expFormatter,\n    } = getFormatters();\n\n    const data = applyFilters(\n        skillData.actions,\n        currentLevel.level,\n        useLevelFilter,\n        useSkillingProdigy,\n        useAreaFilter,\n        includedAreas\n    );\n\n    const columns = [\n        {\n            dataField: 'id',\n            text: 'id',\n            hidden: true,\n        },\n        {\n            dataField: 'level',\n            text: 'Level',\n            sort: true,\n            headerStyle: { width: '5.5rem' },\n            formatter: levelFormatter,\n            formatExtraData: {\n                level: currentLevel.level,\n                isSkillingProdigy: useSkillingProdigy,\n            },\n        },\n        {\n            dataField: 'name',\n            text: 'Activity',\n            sort: true,\n            headerStyle: { width: '15rem' },\n            formatter: nameFormatter,\n            filter: textFilter({ placeholder: 'Filter...' }),\n        },\n        {\n            dataField: 'exp',\n            text: 'Exp',\n            sort: true,\n            headerStyle: { width: '5rem' },\n            formatter: expFormatter,\n            formatExtraData: {\n                baseMultiplier: baseExpMultiplier,\n                expMultiplier,\n                totalLevel,\n            },\n        },\n        {\n            dataField: 'category',\n            text: 'Category',\n            headerStyle: { width: '10rem' },\n            filter: selectFilter({\n                options: skillData.categories,\n            }),\n        },\n        {\n            dataField: 'amount',\n            text: 'Amount',\n            isDummyField: true,\n            sort: true,\n            headerStyle: { width: '7rem' },\n            formatter: amountFormatter,\n            sortValue: (cell, row) => row.exp,\n            formatExtraData: {\n                current: currentLevel.exp,\n                target: targetLevel.exp,\n                baseMultiplier: baseExpMultiplier,\n                expMultiplier,\n                totalLevel,\n            },\n        },\n        {\n            dataField: 'inputs',\n            text: 'Inputs',\n            formatter: inputListFormatter,\n            headerStyle: { width: '10rem' },\n            classes: 'small',\n            formatExtraData: {\n                current: currentLevel.exp,\n                target: targetLevel.exp,\n                baseMultiplier: baseExpMultiplier,\n                expMultiplier,\n                totalLevel,\n                countMultiplier: inputMultiplier,\n                useDoubleCast,\n            },\n            hidden: !data.some(datum => datum.inputs.length > 0),\n        },\n        {\n            dataField: 'outputs',\n            text: 'Outputs',\n            headerStyle: { width: '10rem' },\n            classes: 'small',\n            formatter: outputListFormatter,\n            formatExtraData: {\n                current: currentLevel.exp,\n                target: targetLevel.exp,\n                baseMultiplier: baseExpMultiplier,\n                expMultiplier,\n                totalLevel,\n                countMultiplier: outputMultiplier,\n                useBotanist,\n            },\n            hidden: !data.some(datum => datum.outputs.length > 0),\n        },\n    ];\n\n    return (\n        <div className={getContentWidthClass()}>\n            <h1 className='mt-2 light-text text-center'>{skillData.name}</h1>\n            <CardDeck>\n                <Card bg='dark' text='white' className='mt-2 mb-2' style={{ minWidth: '300px' }}>\n                    <div className='p-3'>\n                        <h4>League base multiplier:</h4>\n                        <div className='pl-2 pb-2'>\n                            <Form.Check\n                                label='5x'\n                                inline\n                                type='radio'\n                                id='5'\n                                checked={baseExpMultiplier === '5'}\n                                onChange={event => {\n                                    setBaseExpMultiplier(event.target.id);\n                                }}\n                            />\n                            <Form.Check\n                                label='8x'\n                                inline\n                                type='radio'\n                                id='8'\n                                checked={baseExpMultiplier === '8'}\n                                onChange={event => {\n                                    setBaseExpMultiplier(event.target.id);\n                                }}\n                            />\n                            <Form.Check\n                                label='12x'\n                                inline\n                                type='radio'\n                                id='12'\n                                checked={baseExpMultiplier === '12'}\n                                onChange={event => {\n                                    setBaseExpMultiplier(event.target.id);\n                                }}\n                            />\n                            <Form.Check\n                                label='16x'\n                                inline\n                                type='radio'\n                                id='16'\n                                checked={baseExpMultiplier === '16'}\n                                onChange={event => {\n                                    setBaseExpMultiplier(event.target.id);\n                                }}\n                            />\n                        </div>\n                        <MultiplierGroup\n                            title='Exp multipliers'\n                            multiplierData={skillData.expMultipliers}\n                            globalMultiplierData={calculatorData.globalMultipliers.expMultipliers}\n                            multipliers={expMultiplier}\n                        />\n                        <MultiplierGroup\n                            title='Input multipliers'\n                            multiplierData={skillData.inputMultipliers}\n                            multipliers={inputMultiplier}\n                        />\n                        {skill === 'farming' && (\n                            <>\n                                <h4>Output multiplier:</h4>\n                                <div className='pl-2'>\n                                    <Form.Check\n                                        label='Relic - Botanist'\n                                        defaultChecked={useBotanist}\n                                        onChange={event => {\n                                            setUseBotanist(event.target.checked);\n                                        }}\n                                    />\n                                </div>\n                            </>\n                        )}\n                        <MultiplierGroup\n                            title='Output multipliers'\n                            multiplierData={skillData.outputMultipliers}\n                            multipliers={outputMultiplier}\n                        />\n                        {!skillData.isCombatSkill && (\n                            <>\n                                <h4>Boosts:</h4>\n                                <div className='pl-2'>\n                                    <Form.Check\n                                        label='Relic - Skilling Prodigy (+12)'\n                                        defaultChecked={useSkillingProdigy}\n                                        onChange={event => {\n                                            setUseSkillingProdigy(event.target.checked);\n                                        }}\n                                    />\n                                </div>\n                            </>\n                        )}\n                        {skill === 'magic' && (\n                            <>\n                                <h4>Input Modifiers:</h4>\n                                <div className='pl-2'>\n                                    <Form.Check\n                                        label='Relic - Double Cast'\n                                        defaultChecked={useDoubleCast}\n                                        onChange={event => {\n                                            setUseDoubleCast(event.target.checked);\n                                        }}\n                                    />\n                                </div>\n                            </>\n                        )}\n                    </div>\n                </Card>\n                <Card bg='dark' text='white' className='mt-2 mb-2' style={{ minWidth: '300px' }}>\n                    <h4 className='pt-3 pl-3'>Level/Experience:</h4>\n                    <HiscoreLookup\n                        skill={skill}\n                        setExpCallback={newExp => {\n                            currentLevel.updateByExp(newExp);\n                            targetLevel.updateByLevel(Math.min(getLevelForExp(newExp) + 1, 99));\n                        }}\n                        setTotalLvlCallback={setTotalLevel}\n                    />\n                    <LevelExpInput\n                        title='Current'\n                        level={currentLevel.level}\n                        exp={currentLevel.exp}\n                        setLevelCallback={currentLevel.updateByLevel}\n                        setExpCallback={currentLevel.updateByExp}\n                    />\n                    <LevelExpInput\n                        title='Target'\n                        level={targetLevel.level}\n                        exp={targetLevel.exp}\n                        setLevelCallback={targetLevel.updateByLevel}\n                        setExpCallback={targetLevel.updateByExp}\n                    />\n                    <InputGroup className='p-3'>\n                        <InputGroup.Prepend>\n                            <InputGroup.Text>Total Level</InputGroup.Text>\n                        </InputGroup.Prepend>\n                        <FormControl value={totalLevel} onChange={event => setTotalLevel(event.target.value)} />\n                    </InputGroup>\n                    <div className='p-3'>\n                        <h5>Remaining until goal:</h5>\n                        <ul>\n                            <li>{`${targetLevel.exp - currentLevel.exp} Experience`}</li>\n                            <li>{`${targetLevel.level - currentLevel.level} Levels`}</li>\n                        </ul>\n                    </div>\n                </Card>\n                <Card bg='dark' text='white' className='mt-2 mb-2' style={{ minWidth: '300px' }}>\n                    <div className='p-3'>\n                        <h4>Filters:</h4>\n                        <div className='pl-2 mb-1'>\n                            <Form.Check\n                                label='Hide actions with missing level requirement'\n                                onChange={event => {\n                                    setUseLevelFilter(event.target.checked);\n                                }}\n                            />\n                        </div>\n                        <h4>Areas:</h4>\n                        <div className='pl-2'>\n                            <Form.Check\n                                label='Include all areas'\n                                checked={!useAreaFilter}\n                                onChange={event => {\n                                    setUseAreaFilter(!event.target.checked);\n                                    if (event.target.checked) {\n                                        setIncludedAreas(REGIONS);\n                                    }\n                                }}\n                            />\n                            <Form.Control\n                                as='select'\n                                multiple\n                                htmlSize='8'\n                                disabled={!useAreaFilter}\n                                value={includedAreas}\n                                onChange={event => {\n                                    const { options } = event.target;\n                                    const selectedAreas = [];\n                                    for (let i = 0, l = options.length; i < l; i++) {\n                                        if (options[i].selected) {\n                                            selectedAreas.push(options[i].value);\n                                        }\n                                    }\n                                    setIncludedAreas(selectedAreas);\n                                }}\n                            >\n                                {REGIONS.map(area => (\n                                    <option key={area}>{area}</option>\n                                ))}\n                            </Form.Control>\n                        </div>\n                    </div>\n                </Card>\n            </CardDeck>\n            <Card bg='dark' text='white' className='mt-3'>\n                <Card.Body>\n                    <DoubleScrollbar backgroundColor='#343a40'>\n                        <BootstrapTable\n                            bootstrap4\n                            keyField='id'\n                            data={data}\n                            columns={columns}\n                            bordered={false}\n                            classes='light-text'\n                            filter={filterFactory()}\n                            filterPosition='top'\n                        />\n                    </DoubleScrollbar>\n                </Card.Body>\n            </Card>\n        </div>\n    );\n}\n\nfunction applyFilters(actions, currentLevel, useLevelFilter, isSkillingProdigy, useAreaFilter, includedAreas) {\n    let filteredActions = actions;\n    if (useLevelFilter) {\n        const boostedLevel = getBoostedLevel(currentLevel, isSkillingProdigy);\n        filteredActions = filteredActions.filter(action => boostedLevel >= action.level);\n    }\n    if (useAreaFilter) {\n        filteredActions = filteredActions.filter(action => {\n            if (action.areas.includes('All')) {\n                return true;\n            }\n            return action.areas.some(r => includedAreas.includes(r));\n        });\n    }\n    return filteredActions;\n}\n","import React, { useState, useEffect } from 'react';\nimport { Card, Col, Row, Form, FormControl, InputGroup, Button } from 'react-bootstrap';\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport { useParams } from 'react-router';\nimport SelectSearch from 'react-select-search';\nimport DoubleScrollbar from 'react-shadowed-double-scrollbar';\nimport update from 'immutability-helper';\nimport _ from 'lodash';\nimport { InlineIcon } from '@iconify/react';\nimport plusIcon from '@iconify/icons-mdi/plus';\nimport {\n    calculateTotalGained,\n    generatePlannerActivities,\n    getBaseMultiplier,\n    getCalcData,\n    getFormatters,\n} from '../util/calculator-util';\nimport calculatorData from '../resources/calculatorData.json';\nimport MultiplierGroup from '../components/MultiplierGroup';\nimport LevelExpInput from '../components/LevelExpInput';\nimport useLevel from '../hooks/useLevel';\nimport useMultiplier from '../hooks/useMultiplier';\nimport { isRelicUnlocked } from '../util/relic-util';\nimport HiscoreLookup from '../components/HiscoreLookup';\nimport { getLevelForExp } from '../util/exp-table';\nimport { getContentWidthClass } from '../util/settings-util';\nimport 'react-select-search/style.css';\nimport { Container } from '../../node_modules/react-bootstrap/esm/index';\n\nexport default function SkillPlanner() {\n    const currentLevel = useLevel(1);\n    const targetLevel = useLevel(Math.min(currentLevel.level + 1, 99));\n    const [totalLevel, setTotalLevel] = useState(1000);\n    const [baseExpMultiplier, setBaseExpMultiplier] = useState('5');\n    const expMultiplier = useMultiplier();\n    const inputMultiplier = useMultiplier();\n    const outputMultiplier = useMultiplier();\n    const { skill } = useParams();\n    const [useDoubleCast, setUseDoubleCast] = useState(isRelicUnlocked('3,3') && skill === 'magic');\n    const [useBotanist, setUseBotanist] = useState(isRelicUnlocked('5,1') && skill === 'farming');\n    const [currentActivity, setCurrentActivity] = useState();\n    const [activityAmount, setActivityAmount] = useState(1);\n    const [plannedActivities, setPlannedActivities] = useState([]);\n\n    let skillData;\n    useEffect(() => {\n        if (!skillData) {\n            return;\n        }\n\n        setBaseExpMultiplier(getBaseMultiplier());\n        // only want this to run a single time on first load, so don't depend on anything here\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    useEffect(() => {\n        expMultiplier.clear();\n        inputMultiplier.clear();\n        outputMultiplier.clear();\n        setUseDoubleCast(isRelicUnlocked('3,3') && skill === 'magic');\n        setUseBotanist(isRelicUnlocked('5,1') && skill === 'farming');\n    }, [skill]);\n\n    skillData = calculatorData.calculators[skill];\n    if (!skillData) {\n        return (\n            <h4 className='mt-5 light-text text-center'>\n                {`No calculator found for \"${skill}\". Check your link and try again.`}\n            </h4>\n        );\n    }\n\n    const activityOptions = generatePlannerActivities(skill);\n    const {\n        nameFormatter,\n        expFormatter,\n        inputAmountFormatter,\n        plannerTotalExpFormatter,\n        deleteFormatter,\n    } = getFormatters();\n    const tableColumns = [\n        {\n            dataField: 'name',\n            text: 'Activity',\n            headerStyle: { width: '12rem' },\n            formatter: nameFormatter,\n        },\n        {\n            dataField: 'amount',\n            text: 'Amount',\n            headerStyle: { width: '7rem' },\n            isDummyField: true,\n            formatter: inputAmountFormatter,\n            formatExtraData: {\n                onChange: (id, newAmount) => {\n                    const activityIdx = plannedActivities.findIndex(action => action.id === id);\n                    setPlannedActivities(update(plannedActivities, { [activityIdx]: { amount: { $set: newAmount } } }));\n                },\n            },\n        },\n        {\n            dataField: 'exp',\n            text: 'Exp each',\n            headerStyle: { width: '5rem' },\n            formatter: expFormatter,\n            formatExtraData: {\n                baseMultiplier: baseExpMultiplier,\n                expMultiplier,\n                totalLevel,\n            },\n        },\n        {\n            dataField: 'total',\n            text: 'Total exp',\n            headerStyle: { width: '5rem' },\n            isDummyField: true,\n            formatter: plannerTotalExpFormatter,\n            formatExtraData: {\n                baseMultiplier: baseExpMultiplier,\n                expMultiplier,\n                totalLevel,\n            },\n        },\n        {\n            dataField: 'delete',\n            text: 'Delete',\n            headerStyle: { width: '5rem' },\n            isDummyField: true,\n            formatter: deleteFormatter,\n            classes: 'clickable',\n            events: {\n                onClick: (event, column, columnIndex, row) => {\n                    const activity = plannedActivities.find(action => action.id === row.id);\n                    setPlannedActivities(_.without(plannedActivities, activity));\n                },\n            },\n        },\n    ];\n\n    const totalGained = calculateTotalGained(\n        currentLevel.exp,\n        plannedActivities,\n        baseExpMultiplier,\n        expMultiplier,\n        totalLevel\n    );\n    return (\n        <div className={getContentWidthClass()}>\n            <h1 className='mt-2 light-text text-center'>{`${skillData.name} Planner`}</h1>\n            <Container fluid>\n                <Row className='m-3 flex-lg-nowrap'>\n                    <Col lg={3}>\n                        <Card bg='dark' text='white' className='mb-2'>\n                            <h4 className='pt-3 pl-3'>Level/Experience:</h4>\n                            <HiscoreLookup\n                                skill={skill}\n                                setExpCallback={newExp => {\n                                    currentLevel.updateByExp(newExp);\n                                    targetLevel.updateByLevel(Math.min(getLevelForExp(newExp) + 1, 99));\n                                }}\n                                setTotalLvlCallback={setTotalLevel}\n                            />\n                            <LevelExpInput\n                                title='Current lvl/exp'\n                                level={currentLevel.level}\n                                exp={currentLevel.exp}\n                                setLevelCallback={currentLevel.updateByLevel}\n                                setExpCallback={currentLevel.updateByExp}\n                            />\n                            <InputGroup className='p-3'>\n                                <InputGroup.Prepend>\n                                    <InputGroup.Text>Total Level</InputGroup.Text>\n                                </InputGroup.Prepend>\n                                <FormControl value={totalLevel} onChange={event => setTotalLevel(event.target.value)} />\n                            </InputGroup>\n                        </Card>\n                        <Card bg='dark' text='white' className='mt-2 mb-2'>\n                            <div className='p-3'>\n                                <h4>League base multiplier:</h4>\n                                <div className='pl-2 pb-2'>\n                                    <Form.Check\n                                        label='5x'\n                                        inline\n                                        type='radio'\n                                        id='5'\n                                        checked={baseExpMultiplier === '5'}\n                                        onChange={event => {\n                                            setBaseExpMultiplier(event.target.id);\n                                        }}\n                                    />\n                                    <Form.Check\n                                        label='8x'\n                                        inline\n                                        type='radio'\n                                        id='8'\n                                        checked={baseExpMultiplier === '8'}\n                                        onChange={event => {\n                                            setBaseExpMultiplier(event.target.id);\n                                        }}\n                                    />\n                                    <Form.Check\n                                        label='12x'\n                                        inline\n                                        type='radio'\n                                        id='12'\n                                        checked={baseExpMultiplier === '12'}\n                                        onChange={event => {\n                                            setBaseExpMultiplier(event.target.id);\n                                        }}\n                                    />\n                                    <Form.Check\n                                        label='16x'\n                                        inline\n                                        type='radio'\n                                        id='16'\n                                        checked={baseExpMultiplier === '16'}\n                                        onChange={event => {\n                                            setBaseExpMultiplier(event.target.id);\n                                        }}\n                                    />\n                                </div>\n                                <MultiplierGroup\n                                    title='Exp multipliers'\n                                    multiplierData={skillData.expMultipliers}\n                                    globalMultiplierData={calculatorData.globalMultipliers.expMultipliers}\n                                    multipliers={expMultiplier}\n                                />\n                                <MultiplierGroup\n                                    title='Input multipliers'\n                                    multiplierData={skillData.inputMultipliers}\n                                    multipliers={inputMultiplier}\n                                />\n                                {skill === 'farming' && (\n                                    <>\n                                        <h4>Output multiplier:</h4>\n                                        <div className='pl-2'>\n                                            <Form.Check\n                                                label='Relic - Botanist'\n                                                defaultChecked={useBotanist}\n                                                onChange={event => {\n                                                    setUseBotanist(event.target.checked);\n                                                }}\n                                            />\n                                        </div>\n                                    </>\n                                )}\n                                <MultiplierGroup\n                                    title='Output multipliers'\n                                    multiplierData={skillData.outputMultipliers}\n                                    multipliers={outputMultiplier}\n                                />\n                                {skill === 'magic' && (\n                                    <>\n                                        <h4>Input Modifiers:</h4>\n                                        <div className='pl-2'>\n                                            <Form.Check\n                                                label='Relic - Double Cast'\n                                                defaultChecked={useDoubleCast}\n                                                onChange={event => {\n                                                    setUseDoubleCast(event.target.checked);\n                                                }}\n                                            />\n                                        </div>\n                                    </>\n                                )}\n                            </div>\n                        </Card>\n                    </Col>\n                    <Col>\n                        <Card bg='dark' text='white'>\n                            <Card.Body>\n                                <h4>Add a planned activity:</h4>\n\n                                <Row>\n                                    <Col>\n                                        <div className='mt-1 mb-1'>\n                                            <SelectSearch\n                                                options={activityOptions}\n                                                name='task'\n                                                placeholder='Begin typing to find an activity...'\n                                                search\n                                                renderOption={renderActivity}\n                                                onChange={setCurrentActivity}\n                                            />\n                                        </div>\n                                    </Col>\n                                    <Col lg={2}>\n                                        <InputGroup className='mt-1 mb-1'>\n                                            <InputGroup.Prepend>\n                                                <InputGroup.Text>Amount</InputGroup.Text>\n                                            </InputGroup.Prepend>\n                                            <FormControl\n                                                type='number'\n                                                value={activityAmount}\n                                                onChange={event => setActivityAmount(event.target.value)}\n                                            />\n                                        </InputGroup>\n                                    </Col>\n                                    <Col lg={2}>\n                                        <Button\n                                            className='mt-1 mb-1'\n                                            variant='outline-light'\n                                            onClick={() => {\n                                                const calcData = getCalcData(skill, currentActivity);\n                                                setPlannedActivities([\n                                                    ...plannedActivities,\n                                                    { ...calcData, amount: activityAmount },\n                                                ]);\n                                                setActivityAmount(1);\n                                            }}\n                                        >\n                                            <InlineIcon icon={plusIcon} /> Add to plan\n                                        </Button>\n                                    </Col>\n                                </Row>\n                            </Card.Body>\n                        </Card>\n                        <Card bg='dark' text='white' className='mt-2'>\n                            <Card.Body>\n                                <p>\n                                    Your plan is worth <b>{totalGained.gainedExp}</b> exp. Upon completion, you will be\n                                    level <b>{totalGained.level}</b> with <b>{totalGained.exp}</b> exp (\n                                    {totalGained.expToNextLevel} exp from next level).\n                                </p>\n\n                                <DoubleScrollbar backgroundColor='#343a40'>\n                                    <BootstrapTable\n                                        bootstrap4\n                                        keyField='id'\n                                        data={plannedActivities}\n                                        columns={tableColumns}\n                                        bordered={false}\n                                        classes='light-text'\n                                        filterPosition='top'\n                                        hover\n                                        rowClasses='text-light'\n                                    />\n                                </DoubleScrollbar>\n                            </Card.Body>\n                        </Card>\n                    </Col>\n                </Row>\n            </Container>\n        </div>\n    );\n}\n\nfunction renderActivity(props, option, snapshot, className) {\n    return (\n        // eslint-disable-next-line react/jsx-props-no-spreading\n        <button {...props} className={className} type='button'>\n            <img alt='' className='mr-1' src={option.icon} />\n            {option.name}\n            {option.description && <span className='small ml-1'>{`(${option.description})`}</span>}\n        </button>\n    );\n}\n","import { useMediaQuery } from 'react-responsive';\n\n/**\n * Uses the same size definitions as bootstrap does\n * https://getbootstrap.com/docs/4.4/layout/overview/#responsive-breakpoints\n */\nconst MEDIA_QUERIES = {\n    XS: {\n        maxWidth: 575.98,\n    },\n    SM: {\n        minWidth: 576,\n        maxWidth: 767.98,\n    },\n    MD: {\n        minWidth: 768,\n        maxWidth: 991.98,\n    },\n    LG: {\n        minWidth: 992,\n        maxWidth: 1199.98,\n    },\n    XL: {\n        minWidth: 1200,\n    },\n};\n\nexport default function useScreenSize() {\n    const isXs = useMediaQuery(MEDIA_QUERIES.XS);\n    const isSm = useMediaQuery(MEDIA_QUERIES.SM);\n    const isMd = useMediaQuery(MEDIA_QUERIES.MD);\n    const isLg = useMediaQuery(MEDIA_QUERIES.LG);\n    const isXl = useMediaQuery(MEDIA_QUERIES.XL);\n\n    const isSizeOrSmaller = size => {\n        switch (size) {\n            case 'xs':\n                return isXs;\n            case 'sm':\n                return isXs || isSm;\n            case 'md':\n                return isXs || isSm || isMd;\n            case 'lg':\n                return isXs || isSm || isMd || isLg;\n            case 'xl':\n                return isXs || isSm || isMd || isLg || isXl;\n            default:\n                return false;\n        }\n    };\n\n    const isSizeOrLarger = size => {\n        switch (size) {\n            case 'xl':\n                return isXl;\n            case 'lg':\n                return isLg || isXl;\n            case 'md':\n                return isMd || isLg || isXl;\n            case 'sm':\n                return isSm || isMd || isLg || isXl;\n            case 'xs':\n            default:\n                return true;\n        }\n    };\n\n    return { isXs, isSm, isMd, isLg, isXl, isSizeOrSmaller, isSizeOrLarger };\n}\n","import React from 'react';\nimport 'react-step-progress-bar/styles.css';\nimport { ProgressBar, Step } from 'react-step-progress-bar';\nimport useScreenSize from '../hooks/useScreenSize';\n\nexport default function UnlockProgressBar({ curValue, maxValue, steps }) {\n    const screenSize = useScreenSize();\n\n    let barHeight = 30;\n    let imgHeight = 40;\n    let imgIcon = '/img/relic-check.png';\n    let showEndIcons = true;\n    let marginClass = 'mt-3 mb-3 mr-5 ml-5';\n    if (screenSize.isSizeOrSmaller('sm')) {\n        barHeight = 20;\n        imgHeight = 20;\n        imgIcon = '/img/notch.png';\n        showEndIcons = false;\n        marginClass = 'm-2';\n    } else if (screenSize.isMd) {\n        barHeight = 25;\n        imgHeight = 25;\n        imgIcon = '/img/notch.png';\n        showEndIcons = false;\n        marginClass = 'm-2';\n    } else if (screenSize.isLg) {\n        barHeight = 30;\n        imgHeight = 30;\n        imgIcon = '/img/notch.png';\n        showEndIcons = false;\n        marginClass = 'm-3';\n    }\n\n    let stepsToShow = steps;\n    if (!showEndIcons) {\n        stepsToShow = steps.slice(1, steps.length - 1);\n    }\n    const stepPercentages = stepsToShow.map(amount => (amount / maxValue) * 100);\n    const curPercentage = Math.min((curValue / maxValue) * 100, 100);\n\n    return (\n        <div className={marginClass}>\n            <ProgressBar\n                filledBackground='linear-gradient(to right, #fefb72, #f0bb31)'\n                percent={curPercentage}\n                height={barHeight}\n                stepPositions={stepPercentages}\n            >\n                {stepsToShow.map(step => {\n                    return (\n                        <Step key={step} transition='scale'>\n                            {({ accomplished }) => (\n                                <div className={`progressStep ${accomplished ? 'accomplished' : null}`}>\n                                    <img src={imgIcon} alt='' height={imgHeight} />\n                                </div>\n                            )}\n                        </Step>\n                    );\n                })}\n            </ProgressBar>\n        </div>\n    );\n}\n","import React from 'react';\nimport { Card, Image } from 'react-bootstrap';\nimport { isRegionUnlocked } from '../util/region-util';\n\nconst MAX_WIDTH = 1433;\n\nexport default function RegionMap({ unlockedRegions }) {\n    const mapImgStyle = { zIndex: 2, position: 'absolute' };\n    return (\n        <Card bg='dark' style={{ maxWidth: MAX_WIDTH, border: '0px' }}>\n            <Image fluid src='/img/map-all.png' alt='' style={{ ...mapImgStyle, position: 'relative', zIndex: 1 }} />\n            <Image fluid src='/img/map-misthalin.png' alt='' style={mapImgStyle} />\n            <Image fluid src='/img/map-karamja.png' alt='' style={mapImgStyle} />\n            {isRegionUnlocked('Asgarnia', unlockedRegions) && (\n                <Image fluid src='/img/map-asgarnia.png' alt='' style={mapImgStyle} />\n            )}\n            {isRegionUnlocked('Desert', unlockedRegions) && (\n                <Image fluid src='/img/map-desert.png' alt='' style={mapImgStyle} />\n            )}\n            {isRegionUnlocked('Fremennik', unlockedRegions) && (\n                <Image fluid src='/img/map-fremennik.png' alt='' style={mapImgStyle} />\n            )}\n            {isRegionUnlocked('Kandarin', unlockedRegions) && (\n                <Image fluid src='/img/map-kandarin.png' alt='' style={mapImgStyle} />\n            )}\n            {isRegionUnlocked('Morytania', unlockedRegions) && (\n                <Image fluid src='/img/map-morytania.png' alt='' style={mapImgStyle} />\n            )}\n            {isRegionUnlocked('Tirannwn', unlockedRegions) && (\n                <Image fluid src='/img/map-tirannwn.png' alt='' style={mapImgStyle} />\n            )}\n            {isRegionUnlocked('Wilderness', unlockedRegions) && (\n                <Image fluid src='/img/map-wilderness.png' alt='' style={mapImgStyle} />\n            )}\n        </Card>\n    );\n}\n","import React, { useState } from 'react';\nimport { Card, Container, Row, Col, Button } from 'react-bootstrap';\nimport _ from 'lodash';\nimport ProgressBar from './UnlockProgressBar';\nimport {\n    MAX_TASKS,\n    REGIONS,\n    REGION_UNLOCKS,\n    isRegionUnlocked,\n    INITIAL_REGIONS_STATE,\n    getTasksToNextRegion,\n} from '../util/region-util';\nimport RegionMap from './RegionMap';\nimport regionsData from '../resources/regionsData.json';\n\nexport default function RegionsTracker({ totalTasks, unlockedRegions, setUnlockedRegionsCallback }) {\n    const [selectedRegion, setSelectedRegion] = useState('Misthalin');\n    const tasksToNextRegion = getTasksToNextRegion(totalTasks);\n\n    return (\n        <>\n            <Card bg='dark' text='white' className='mt-3'>\n                <h1 className='m-3 text-center'>\n                    {tasksToNextRegion > 0\n                        ? `${totalTasks} Tasks complete - ${tasksToNextRegion} To Next Region Unlock`\n                        : 'All areas unlocked!'}\n                </h1>\n                <ProgressBar curValue={totalTasks} maxValue={MAX_TASKS} steps={REGION_UNLOCKS} />\n            </Card>\n\n            <Card bg='dark' text='white' className='mt-3'>\n                <Container fluid>\n                    <Row>\n                        <Col>\n                            <Container fluid>\n                                <Row>\n                                    <Col className='text-center'>\n                                        <h6 className='mt-2'>Select a region to view more information or unlock it:</h6>\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col className='text-center'>\n                                        {REGIONS.map(regionName => (\n                                            <Button\n                                                key={regionName}\n                                                className='m-1'\n                                                variant={selectedRegion === regionName ? 'light' : 'outline-light'}\n                                                onClick={() => setSelectedRegion(regionName)}\n                                            >\n                                                {regionName}\n                                            </Button>\n                                        ))}\n                                    </Col>\n                                </Row>\n                            </Container>\n                            <div className='m-3'>\n                                <RegionMap unlockedRegions={unlockedRegions} />\n                            </div>\n                        </Col>\n                        <Col className='m-2' sm={4}>\n                            <div className='text-center mb-2'>\n                                <h3>{selectedRegion}</h3>\n                                {!INITIAL_REGIONS_STATE.includes(selectedRegion) &&\n                                    (isRegionUnlocked(selectedRegion, unlockedRegions) ? (\n                                        <Button\n                                            variant='outline-light'\n                                            onClick={() => {\n                                                setUnlockedRegionsCallback(prevState =>\n                                                    _.without(prevState, selectedRegion)\n                                                );\n                                            }}\n                                        >\n                                            Re-lock this region\n                                        </Button>\n                                    ) : (\n                                        <Button\n                                            variant='light'\n                                            onClick={() =>\n                                                setUnlockedRegionsCallback(prevState => [...prevState, selectedRegion])\n                                            }\n                                        >\n                                            Unlock this region\n                                        </Button>\n                                    ))}\n                            </div>\n                            <div className='relic-table-cell p-2' style={{ maxHeight: '700px', overflowY: 'scroll' }}>\n                                <h5>Overview:</h5>\n                                <p>{regionsData[selectedRegion].overview}</p>\n                                {regionsData[selectedRegion].travel && (\n                                    <>\n                                        <p>\n                                            The following travel options are restricted unless you have access to the\n                                            appropriate area:\n                                        </p>\n                                        <ul>\n                                            {regionsData[selectedRegion].travel.map(listItem => (\n                                                <li key={listItem}>{listItem}</li>\n                                            ))}\n                                        </ul>\n                                    </>\n                                )}\n                                <h5>Key Info:</h5>\n                                <p>Notable Settlements:</p>\n                                <ul>\n                                    {regionsData[selectedRegion].settlements.map(listItem => (\n                                        <li key={listItem}>{listItem}</li>\n                                    ))}\n                                </ul>\n                                Notable combat-related activities:\n                                <ul>\n                                    {regionsData[selectedRegion].combatActivities.map(listItem => (\n                                        <li key={listItem}>{listItem}</li>\n                                    ))}\n                                </ul>\n                                Notable non-combat activities:\n                                <ul>\n                                    {regionsData[selectedRegion].nonCombatActivities.map(listItem => (\n                                        <li key={listItem}>{listItem}</li>\n                                    ))}\n                                </ul>\n                                {regionsData[selectedRegion].shops && (\n                                    <>\n                                        Notable shops:\n                                        <ul>\n                                            {regionsData[selectedRegion].shops.map(listItem => (\n                                                <li key={listItem}>{listItem}</li>\n                                            ))}\n                                        </ul>\n                                    </>\n                                )}\n                                <p>\n                                    All Slayer Masters will assign tasks from the same Slayer list and assign the same\n                                    number of Slayer Points on task completion. Slayer tasks will still respect Slayer\n                                    and Combat Level requirements.\n                                </p>\n                                <p>Unlocking Misthalin will add the following tasks to your Slayer list:</p>\n                                <ul>\n                                    {regionsData[selectedRegion].slayerTasks.map(listItem => (\n                                        <li key={listItem}>{listItem}</li>\n                                    ))}\n                                </ul>\n                                <h5>Unlocks:</h5>\n                                <p>\n                                    The following quests are automatically completed but will not reward any completion\n                                    XP:\n                                </p>\n                                <ul>\n                                    {regionsData[selectedRegion].questUnlocks.map(listItem => (\n                                        <li key={listItem}>{listItem}</li>\n                                    ))}\n                                </ul>\n                                {regionsData[selectedRegion].diaryUnlocks && (\n                                    <>\n                                        {regionsData[selectedRegion].diaryUnlocks.map(diaryData => (\n                                            <React.Fragment key={diaryData.area}>\n                                                <p>\n                                                    {`The following tasks in the ${diaryData.area} Achievement Diary are\n                                                    automatically completed.`}\n                                                </p>\n                                                <p>Easy Tasks:</p>\n                                                <ul>\n                                                    {diaryData.easyTasks.map(listItem => (\n                                                        <li key={listItem}>{listItem}</li>\n                                                    ))}\n                                                </ul>\n                                                <p>Medium Tasks:</p>\n                                                <ul>\n                                                    {diaryData.medTasks.map(listItem => (\n                                                        <li key={listItem}>{listItem}</li>\n                                                    ))}\n                                                </ul>\n                                                <p>Hard Tasks:</p>\n                                                <ul>\n                                                    {diaryData.hardTasks.map(listItem => (\n                                                        <li key={listItem}>{listItem}</li>\n                                                    ))}\n                                                </ul>\n                                                <p>Elite Tasks:</p>\n                                                <ul>\n                                                    {diaryData.eliteTasks.map(listItem => (\n                                                        <li key={listItem}>{listItem}</li>\n                                                    ))}\n                                                </ul>\n                                            </React.Fragment>\n                                        ))}\n                                    </>\n                                )}\n                                <h5>Drops:</h5>\n                                <p>\n                                    {`The drops listed below are affected by the drop rate modifier perks granted by\n                                    passive Relic unlocks. Drop rates affected are always rounded down and are not tied\n                                    to area unlocks, this list represents the key drops affected in ${selectedRegion}.`}\n                                </p>\n                                <ul>\n                                    {regionsData[selectedRegion].notableDrops.map(listItem => (\n                                        <li key={listItem}>{listItem}</li>\n                                    ))}\n                                </ul>\n                            </div>\n                        </Col>\n                    </Row>\n                </Container>\n            </Card>\n        </>\n    );\n}\n","import React from 'react';\nimport { getRelicInfo } from '../util/relic-util';\n\nexport default function RelicInfoTile({ relicKey, selected, onClickEvent, isWide, additionalContent }) {\n    const { name, description, icon } = getRelicInfo(relicKey);\n\n    const cellStyle = {\n        width: '100%',\n        minWidth: '150px',\n    };\n\n    if (!name) {\n        return <div className='relic-table-cell p-2' style={cellStyle} />;\n    }\n\n    if (isWide) {\n        return (\n            <div\n                className={`relic-table-cell p-2${selected ? ' selected' : ''}`}\n                style={cellStyle}\n                onClick={onClickEvent}\n            >\n                {icon && <img src={icon} alt='' height={75} width={75} className='float-left m-3' />}\n                <div>\n                    <h5>{name}</h5>\n                    <ul>\n                        {description.map(listItem => (\n                            <li>{listItem}</li>\n                        ))}\n                    </ul>\n                    {additionalContent}\n                </div>\n            </div>\n        );\n    }\n\n    return (\n        <div\n            className={`relic-table-cell p-2 d-flex flex-column align-items-center justify-content-center text-center${\n                selected ? ' selected' : ''\n            }`}\n            onClick={onClickEvent}\n            style={cellStyle}\n        >\n            <h5>{name}</h5>\n            {icon && <img src={icon} alt='' height={75} width={75} />}\n            {additionalContent}\n        </div>\n    );\n}\n","import React, { useState } from 'react';\nimport { Card, Button } from 'react-bootstrap';\nimport DoubleScrollbar from 'react-shadowed-double-scrollbar';\nimport ProgressBar from './UnlockProgressBar';\nimport RelicInfoTile from './RelicInfoTile';\nimport relicData from '../resources/relicData.json';\nimport {\n    getRelicKey,\n    MAX_POINTS,\n    RELIC_UNLOCKS,\n    unlockRelicInState,\n    lockRelicInState,\n    isRelicUnlocked,\n    getPointsToNextRelic,\n    isPassiveRelic,\n} from '../util/relic-util';\nimport useLocalStorage from '../hooks/useLocalStorage';\nimport { LOCALSTORAGE_KEYS } from '../util/browser-util';\n\nexport default function RelicsTracker({ totalPoints }) {\n    const [selectedRelic, setSelectedRelic] = useState();\n    const [unlockedRelics, setUnlockedRelics] = useLocalStorage(LOCALSTORAGE_KEYS.UNLOCKED_RELICS, {});\n    const pointsToNextRelic = getPointsToNextRelic(totalPoints);\n\n    return (\n        <Card bg='dark' text='white' className='mt-3'>\n            <h1 className='m-3 text-center'>\n                {pointsToNextRelic > 0\n                    ? `${totalPoints} Points - ${pointsToNextRelic} To Next Unlock`\n                    : 'All relics unlocked!'}\n            </h1>\n            <ProgressBar curValue={totalPoints} maxValue={MAX_POINTS} steps={RELIC_UNLOCKS} />\n            <Card bg='dark' style={{ border: 'none' }}>\n                <Card.Body>\n                    <DoubleScrollbar backgroundColor='#343a40'>\n                        <div>\n                            <div className='d-flex no-wrap align-items-stretch'>\n                                {Array.from({ length: 6 }, (_, i) => {\n                                    const relicCategory = relicData[i].category;\n                                    return (\n                                        <div\n                                            key={i}\n                                            className='relic-table-cell d-flex flex-column align-items-center'\n                                            style={{ width: '100%', minWidth: '150px' }}\n                                        >\n                                            <h3>{`Tier ${i + 1}`}</h3>\n                                            <h5 className='text-muted'>{relicCategory}</h5>\n                                        </div>\n                                    );\n                                })}\n                            </div>\n                            {Array.from({ length: 4 }, (_, i) => {\n                                return (\n                                    <div className='d-flex no-wrap align-items-stretch' key={i}>\n                                        {Array.from({ length: 6 }, (n, j) => {\n                                            const relicKey = getRelicKey(j, i);\n                                            return (\n                                                <RelicInfoTile\n                                                    key={relicKey}\n                                                    relicKey={relicKey}\n                                                    onClickEvent={() => setSelectedRelic(relicKey)}\n                                                    selected={isRelicUnlocked(relicKey, unlockedRelics)}\n                                                />\n                                            );\n                                        })}\n                                    </div>\n                                );\n                            })}\n                        </div>\n                    </DoubleScrollbar>\n                </Card.Body>\n            </Card>\n            <div className='relic-table-cell m-4'>\n                {selectedRelic ? (\n                    <RelicInfoTile\n                        relicKey={selectedRelic}\n                        isWide\n                        additionalContent={\n                            <>\n                                {!isPassiveRelic(selectedRelic) &&\n                                    (isRelicUnlocked(selectedRelic, unlockedRelics) ? (\n                                        <Button\n                                            variant='dark'\n                                            onClick={() =>\n                                                setUnlockedRelics(prevState => {\n                                                    return lockRelicInState(prevState, selectedRelic);\n                                                })\n                                            }\n                                        >\n                                            Re-lock this relic\n                                        </Button>\n                                    ) : (\n                                        <Button\n                                            variant='light'\n                                            onClick={() =>\n                                                setUnlockedRelics(prevState => {\n                                                    return unlockRelicInState(prevState, selectedRelic);\n                                                })\n                                            }\n                                        >\n                                            Unlock this relic\n                                        </Button>\n                                    ))}\n                            </>\n                        }\n                    />\n                ) : (\n                    <p className='m-1'>Select a relic to view more information or unlock it.</p>\n                )}\n            </div>\n        </Card>\n    );\n}\n","import React from 'react';\nimport { InlineIcon } from '@iconify/react';\nimport checkedIcon from '@iconify/icons-mdi/check-circle-outline';\nimport uncheckedIcon from '@iconify/icons-mdi/checkbox-blank-circle-outline';\nimport closeIcon from '@iconify/icons-mdi/close';\nimport plusIcon from '@iconify/icons-mdi/plus';\nimport Badge from 'react-bootstrap/Badge';\nimport taskData from '../resources/taskData.json';\nimport calculatorData from '../resources/calculatorData.json';\n\nexport const DIFFICULTIES = ['Easy', 'Medium', 'Hard', 'Elite', 'Master'];\nexport const DIFFICULTY_POINTS = {\n    Easy: 10,\n    Medium: 50,\n    Hard: 100,\n    Elite: 250,\n    Master: 500,\n};\n\nexport function getFormatters() {\n    return {\n        completedFormatter,\n        pointsFormatter,\n        difficultyFormatter,\n        nameFormatter,\n        skillsFormatter,\n        manageFormatter,\n    };\n}\n\nexport function getRenderers() {\n    return {\n        pageButtonRenderer,\n        pageListRenderer,\n        sizePerPageRenderer,\n    };\n}\n\nfunction completedFormatter(cell, row, rowIndex, props) {\n    const isComplete = isTaskComplete(row.id, props.taskStatus);\n    return (\n        <div className={isComplete ? 'completed' : ''}>\n            <InlineIcon icon={isComplete ? checkedIcon : uncheckedIcon} height='20px' />\n        </div>\n    );\n}\n\nfunction pointsFormatter(cell, row) {\n    const points = DIFFICULTY_POINTS[row.difficulty];\n    if (!points) {\n        return 0;\n    }\n    return points;\n}\n\nfunction difficultyFormatter(cell, row, rowIndex) {\n    const points = pointsFormatter(cell, row, rowIndex);\n    return `${cell} (${points})`;\n}\n\nfunction nameFormatter(cell, row, rowIndex, props) {\n    let className = '';\n    if (isTaskHidden(row.id, props.taskStatus)) {\n        className = 'text-muted';\n    } else if (isTaskComplete(row.id, props.taskStatus)) {\n        className = 'completed';\n    }\n\n    return (\n        <div className={className}>\n            {cell}\n            <div className='small'>{row.description}</div>\n        </div>\n    );\n}\n\nfunction manageFormatter(cell, row, rowIndex, props) {\n    const isOnTodoList = isTaskOnTodoList(row.id, props.taskStatus);\n    const isHidden = isTaskHidden(row.id, props.taskStatus);\n    return (\n        <div className='d-flex justify-content-around'>\n            <div className='clickable mb-1 hover-highlight' onClick={() => props.setTaskTodo(!isOnTodoList, row.id)}>\n                <InlineIcon icon={isOnTodoList ? closeIcon : plusIcon} />\n                {' To-do'}\n            </div>\n            <div className='clickable hover-highlight' onClick={() => props.setTaskHidden(!isHidden, row.id)}>\n                <InlineIcon icon={isHidden ? plusIcon : closeIcon} />\n                {isHidden ? ' Unhide' : ' Hide'}\n            </div>\n        </div>\n    );\n}\n\nfunction skillsFormatter(cell, row, rowIndex, props) {\n    return cell.map(skill => {\n        const name = skill.name.toLowerCase();\n        let variant = 'light';\n        if (props.hiscores) {\n            const isReqMet = meetsSkillRequirement(\n                props.hiscores,\n                name,\n                skill.level,\n                skill.boostable,\n                props.isSkillingProdigy\n            );\n            variant = isReqMet ? 'success' : 'danger';\n        }\n        const icon = `/img/${name}.gif`;\n        return (\n            <Badge pill key={name} variant={variant}>\n                <img src={icon} alt={skill.name} title={skill.name} />\n                {skill.level}\n            </Badge>\n        );\n    });\n}\n\nfunction pageButtonRenderer({ page, active, onPageChange }) {\n    const handleClick = e => {\n        e.preventDefault();\n        onPageChange(page);\n    };\n    const activeStyle = {\n        padding: '6px 12px',\n    };\n    if (active) {\n        activeStyle.backgroundColor = '#484e53';\n        activeStyle.color = 'white';\n    } else {\n        activeStyle.backgroundColor = '#343a40';\n        activeStyle.color = 'white';\n    }\n    return (\n        <li key={page} className='align-self-center' style={{ display: 'inline' }}>\n            {/* eslint-disable-next-line jsx-a11y/anchor-is-valid */}\n            <a href='#' onClick={handleClick} style={activeStyle}>\n                {page}\n            </a>\n        </li>\n    );\n}\n\nfunction pageListRenderer({ pages, onPageChange }) {\n    return (\n        <div>\n            <ul className='list-unstyled'>{pages.map(page => pageButtonRenderer({ ...page, onPageChange }))}</ul>\n        </div>\n    );\n}\n\nfunction sizePerPageRenderer({ options, currSizePerPage, onSizePerPageChange }) {\n    return (\n        <div className='btn-group mb-2' role='group'>\n            {options.map(option => {\n                const isSelected = currSizePerPage === `${option.page}`;\n                return (\n                    <button\n                        key={option.text}\n                        type='button'\n                        onClick={() => onSizePerPageChange(option.page)}\n                        className={`btn ${isSelected ? 'btn-light' : 'btn-secondary'}`}\n                    >\n                        {option.text}\n                    </button>\n                );\n            })}\n        </div>\n    );\n}\n\nexport function isTaskComplete(taskId, taskState) {\n    return taskState.tasks.includes(taskId);\n}\n\nexport function isTaskOnTodoList(taskId, taskState) {\n    return taskState.todoList.includes(taskId);\n}\n\nexport function isTaskHidden(taskId, taskState) {\n    return taskState.hidden.includes(taskId);\n}\n\nexport function isTaskCompletable(taskId, hiscores, isSkillingProdigy) {\n    const taskReqs = taskData.tasksById[taskId].skills;\n    for (const skillReq of taskReqs) {\n        if (\n            !meetsSkillRequirement(\n                hiscores,\n                skillReq.name.toLowerCase(),\n                skillReq.level,\n                skillReq.boostable,\n                isSkillingProdigy\n            )\n        ) {\n            return false;\n        }\n    }\n    return true;\n}\n\nexport function meetsSkillRequirement(hiscores, reqSkill, reqLevel, isBoostable, isSkillingProdigy) {\n    let currentLevel = hiscores && hiscores.skills[reqSkill] && hiscores.skills[reqSkill].level;\n    if (isBoostable && isSkillingProdigy) {\n        const isNoncombatSkill =\n            calculatorData.calculators[reqSkill] && !calculatorData.calculators[reqSkill].isCombatSkill;\n        currentLevel = isNoncombatSkill ? currentLevel + 12 : currentLevel;\n    }\n    return currentLevel >= reqLevel;\n}\n\nexport function removeCompletedFromTodo(taskStatus, setIsTodoCallback) {\n    const idsToRemove = [];\n    taskStatus.todoList.forEach(taskId => {\n        if (isTaskComplete(taskId, taskStatus)) {\n            idsToRemove.push(taskId);\n        }\n    });\n    setIsTodoCallback(idsToRemove, false);\n}\n\nexport function applyFilters(tasks, filterFunctions) {\n    return tasks.filter(task => {\n        let status = true;\n        filterFunctions.forEach(filterFunction => {\n            status = status && filterFunction(task);\n        });\n        return status;\n    });\n}\n\nexport function isTaskCompletableWithRegions(taskId, unlockedRegions) {\n    const task = taskData.tasksById[taskId];\n    if (!unlockedRegions.includes(task.area)) {\n        return false;\n    }\n\n    const reqAllOfRegions = task.additionalAreas.allOf;\n    if (reqAllOfRegions) {\n        for (const reqReqion of reqAllOfRegions) {\n            if (!unlockedRegions.includes(reqReqion)) {\n                return false;\n            }\n        }\n    }\n\n    const reqOneOfRegions = task.additionalAreas.oneOf;\n    if (reqOneOfRegions) {\n        for (const reqReqion of reqOneOfRegions) {\n            if (unlockedRegions.includes(reqReqion)) {\n                return true;\n            }\n        }\n    }\n\n    return true;\n}\n\nexport function getCompletedTasksInArea(area, taskStatus) {\n    const completedTasks = [];\n    taskStatus.tasks.forEach(taskId => {\n        const task = taskData.tasksById[taskId];\n        if (task.area === area) {\n            completedTasks.push(taskId);\n        }\n    });\n    return completedTasks;\n}\n\nexport function getCompletedTasksWithDifficulty(difficulty, taskStatus) {\n    const completedTasks = [];\n    taskStatus.tasks.forEach(taskId => {\n        const task = taskData.tasksById[taskId];\n        if (task.difficulty === difficulty) {\n            completedTasks.push(taskId);\n        }\n    });\n    return completedTasks;\n}\n\nexport function getPointsEarned(taskStatus, area, difficulty) {\n    let totalPoints = 0;\n    taskStatus.tasks.forEach(taskId => {\n        const task = taskData.tasksById[taskId];\n        if (area) {\n            if (task.area === area) {\n                totalPoints += DIFFICULTY_POINTS[task.difficulty];\n            }\n        } else if (difficulty) {\n            if (task.difficulty === difficulty) {\n                totalPoints += DIFFICULTY_POINTS[task.difficulty];\n            }\n        } else {\n            totalPoints += DIFFICULTY_POINTS[task.difficulty];\n        }\n    });\n    return totalPoints;\n}\n\nexport function getMaxCompletableTaskPoints(unlockedRegions, taskStatus) {\n    const maxTaskPoints = {\n        tasks: {\n            Total: 0,\n            Easy: 0,\n            Medium: 0,\n            Hard: 0,\n            Elite: 0,\n            Master: 0,\n        },\n        points: {\n            Total: 0,\n            Easy: 0,\n            Medium: 0,\n            Hard: 0,\n            Elite: 0,\n            Master: 0,\n        },\n    };\n    for (const [id, task] of Object.entries(taskData.tasksById)) {\n        if (isTaskCompletableWithRegions(id, unlockedRegions) && !isTaskHidden(id, taskStatus)) {\n            const { difficulty, area } = task;\n            const pointValue = DIFFICULTY_POINTS[difficulty];\n            maxTaskPoints.tasks.Total += 1;\n            maxTaskPoints.points.Total += pointValue;\n            maxTaskPoints.tasks[difficulty] += 1;\n            maxTaskPoints.points[difficulty] += pointValue;\n            maxTaskPoints.tasks[area] = maxTaskPoints.tasks[area] ? maxTaskPoints.tasks[area] + 1 : 1;\n            maxTaskPoints.points[area] = maxTaskPoints.points[area]\n                ? maxTaskPoints.points[area] + pointValue\n                : pointValue;\n        }\n    }\n    return maxTaskPoints;\n}\n\nexport function getTaskPointsOnTodoList(taskStatus, regions) {\n    const todoListStatus = {\n        tasks: 0,\n        points: 0,\n    };\n\n    taskStatus.todoList.forEach(taskId => {\n        const task = taskData.tasksById[taskId];\n        if (regions.includes(task.area) && !isTaskComplete(taskId, taskStatus) && !isTaskHidden(taskId, taskStatus)) {\n            const pointValue = DIFFICULTY_POINTS[task.difficulty];\n            todoListStatus.tasks += 1;\n            todoListStatus.points += pointValue;\n        }\n    });\n    return todoListStatus;\n}\n","import React from 'react';\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport filterFactory, { textFilter, selectFilter } from 'react-bootstrap-table2-filter';\nimport paginationFactory from 'react-bootstrap-table2-paginator';\nimport DoubleScrollbar from 'react-shadowed-double-scrollbar';\nimport taskData from '../resources/taskData.json';\nimport { applyFilters, getFormatters, getRenderers, isTaskComplete } from '../util/task-util';\nimport { isColumnHidden } from '../util/settings-util';\n\nexport default function TaskTable({ area, taskStatus, updateTaskStatus, taskFilters, hiscores, isSkillingProdigy }) {\n    const {\n        completedFormatter,\n        pointsFormatter,\n        nameFormatter,\n        difficultyFormatter,\n        skillsFormatter,\n        manageFormatter,\n    } = getFormatters();\n    const taskTableContent = area === 'All' ? taskData.tasks : taskData.tasksByRegion[area];\n\n    const setTaskCompletion = (isComplete, taskId) => {\n        updateTaskStatus.setCompleted(taskId, isComplete);\n    };\n    const setTaskTodo = (isOnTodoList, taskId) => {\n        updateTaskStatus.setTodoListed(taskId, isOnTodoList);\n    };\n    const setTaskHidden = (isHidden, taskId) => {\n        updateTaskStatus.setHidden(taskId, isHidden);\n    };\n\n    const columns = [\n        {\n            dataField: 'done',\n            text: 'Done',\n            isDummyField: true,\n            headerStyle: { width: '5rem' },\n            formatter: completedFormatter,\n            formatExtraData: { taskStatus },\n            classes: 'clickable',\n            events: {\n                onClick: (event, column, columnIndex, row) => {\n                    const isComplete = isTaskComplete(row.id, taskStatus);\n                    setTaskCompletion(!isComplete, row.id);\n                },\n            },\n        },\n        {\n            dataField: 'spacer',\n            text: '',\n            isDummyField: true,\n        },\n        {\n            dataField: 'name',\n            text: 'Task',\n            sort: true,\n            headerStyle: { width: '22rem' },\n            filter: textFilter({ placeholder: 'Filter...' }),\n            formatter: nameFormatter,\n            formatExtraData: { taskStatus },\n            classes: 'clickable',\n            events: {\n                onClick: (event, column, columnIndex, row) => {\n                    const isComplete = isTaskComplete(row.id, taskStatus);\n                    setTaskCompletion(!isComplete, row.id);\n                },\n            },\n        },\n        {\n            dataField: 'spacer2',\n            text: '',\n            isDummyField: true,\n        },\n        {\n            dataField: 'difficulty',\n            text: 'Difficulty',\n            sort: true,\n            sortValue: pointsFormatter,\n            headerStyle: { width: '10rem' },\n            filter: selectFilter({\n                placeholder: '(all)',\n                options: taskData.difficulties,\n            }),\n            formatter: difficultyFormatter,\n            hidden: isColumnHidden('Difficulty'),\n        },\n        {\n            dataField: 'category',\n            text: 'Category',\n            headerStyle: { width: '10rem' },\n            sort: true,\n            filter: selectFilter({\n                placeholder: '(all)',\n                options: taskData.categories,\n            }),\n            hidden: isColumnHidden('Category'),\n        },\n        {\n            dataField: 'subcategory',\n            text: 'Subcategory',\n            headerStyle: { width: '10rem' },\n            sort: true,\n            filter: textFilter({ placeholder: 'Filter...' }),\n            hidden: isColumnHidden('Subcategory'),\n        },\n        {\n            dataField: 'skills',\n            text: 'Requires',\n            formatter: skillsFormatter,\n            formatExtraData: { hiscores, isSkillingProdigy },\n            headerStyle: { width: '8rem' },\n            hidden: isColumnHidden('Requirements'),\n        },\n        {\n            dataField: 'manage',\n            text: 'Manage',\n            isDummyField: true,\n            headerStyle: { width: '10rem' },\n            formatter: manageFormatter,\n            formatExtraData: {\n                taskStatus,\n                setTaskTodo,\n                setTaskHidden,\n            },\n            hidden: isColumnHidden('Manage'),\n        },\n    ];\n\n    const { pageButtonRenderer, pageListRenderer, sizePerPageRenderer } = getRenderers();\n    const tableData = taskFilters ? applyFilters(taskTableContent, taskFilters) : taskTableContent;\n\n    return (\n        <div style={{ maxWidth: '100%' }}>\n            <DoubleScrollbar backgroundColor='#343a40'>\n                <BootstrapTable\n                    bootstrap4\n                    keyField='id'\n                    data={tableData}\n                    columns={columns}\n                    bordered={false}\n                    classes='light-text'\n                    filter={filterFactory()}\n                    filterPosition='top'\n                    hover\n                    rowClasses='text-light'\n                    pagination={paginationFactory({\n                        pageButtonRenderer,\n                        pageListRenderer,\n                        sizePerPageRenderer,\n                        sizePerPage: 20,\n                        sizePerPageList: [\n                            { text: '20', value: 20 },\n                            { text: '50', value: 50 },\n                            { text: '100', value: 100 },\n                            { text: 'All', value: 1000 },\n                        ],\n                        alwaysShowAllBtns: true,\n                    })}\n                />\n            </DoubleScrollbar>\n        </div>\n    );\n}\n","import React, { useState } from 'react';\nimport { Card, Row, Col, Form, Button, Accordion } from 'react-bootstrap';\nimport {\n    isTaskComplete,\n    isTaskCompletable,\n    applyFilters,\n    DIFFICULTY_POINTS,\n    DIFFICULTIES,\n    isTaskHidden,\n    isTaskCompletableWithRegions,\n    isTaskOnTodoList,\n} from '../util/task-util';\nimport { LOCALSTORAGE_KEYS } from '../util/browser-util';\nimport HiscoreLookup from './HiscoreLookup';\nimport taskData from '../resources/taskData.json';\nimport useLocalStorage from '../hooks/useLocalStorage';\n\nexport default function RandomTaskGenerator({\n    taskStatus,\n    updateTaskStatus,\n    refreshHiscores,\n    hiscores,\n    unlockedRegions,\n}) {\n    const [onlyMetRequirements, setOnlyMetRequirements] = useState(false);\n    const [onlyTodoList, setOnlyTodoList] = useState(false);\n    const [currentTaskId, setCurrentTaskId] = useLocalStorage(LOCALSTORAGE_KEYS.GENERATED_TASK, -1);\n    const [includedAreas, setIncludedAreas] = useState(unlockedRegions);\n    const [useAreaFilter, setUseAreaFilter] = useState(false);\n    const [includedDifficulties, setIncludedDifficulties] = useState(DIFFICULTIES);\n    const [useDifficultyFilter, setUseDifficultyFilter] = useState(false);\n    const [completeButtonEnabled, setCompleteButtonEnabled] = useState(currentTaskId >= 0);\n    const [generateErrText, setGenerateErrText] = useState('');\n    const taskFilters = [];\n\n    taskFilters.push(\n        task =>\n            !isTaskComplete(task.id, taskStatus) &&\n            !isTaskHidden(task.id, taskStatus) &&\n            isTaskCompletableWithRegions(task.id, includedAreas)\n    );\n    taskFilters.push(task => !onlyMetRequirements || !hiscores || isTaskCompletable(task.id, hiscores));\n    taskFilters.push(task => !useAreaFilter || includedAreas.includes(task.area));\n    taskFilters.push(task => !useDifficultyFilter || includedDifficulties.includes(task.difficulty));\n    taskFilters.push(task => !onlyTodoList || isTaskOnTodoList(task.id, taskStatus));\n\n    return (\n        <Card bg='dark' text='white' style={{ border: '2px solid #6c757d', borderRadius: '0rem 0rem .25rem .25rem' }}>\n            <Row className='m-3'>\n                <Col lg={4}>\n                    <Card bg='dark' text='white' style={{ border: '0' }} className='p-3'>\n                        <h4>Configure task generator:</h4>\n                        <Accordion>\n                            <Card bg='dark' text='white' style={{ border: '1px solid #6c757d' }} className='clickable'>\n                                <Accordion.Toggle as={Card.Header} eventKey='general'>\n                                    <h5>General</h5>\n                                </Accordion.Toggle>\n                                <Accordion.Collapse eventKey='general'>\n                                    <div className='p-3'>\n                                        <div className='pl-3'>\n                                            <Form.Check\n                                                label='Only include tasks on your to-do list'\n                                                checked={onlyTodoList}\n                                                onChange={() => setOnlyTodoList(prevState => !prevState)}\n                                            />\n                                        </div>\n                                    </div>\n                                </Accordion.Collapse>\n                            </Card>\n                            <Card bg='dark' text='white' style={{ border: '1px solid #6c757d' }} className='clickable'>\n                                <Accordion.Toggle as={Card.Header} eventKey='skills'>\n                                    <h5>Skills</h5>\n                                </Accordion.Toggle>\n                                <Accordion.Collapse eventKey='skills'>\n                                    <div className='p-3'>\n                                        <div className='pl-3'>\n                                            <Form.Check\n                                                label='Only include tasks with obtained requirements (requires hiscores lookup)'\n                                                checked={onlyMetRequirements}\n                                                onChange={() => setOnlyMetRequirements(prevState => !prevState)}\n                                            />\n                                        </div>\n                                        <HiscoreLookup refreshStateCallback={refreshHiscores} />\n                                    </div>\n                                </Accordion.Collapse>\n                            </Card>\n                            <Card bg='dark' text='white' style={{ border: '1px solid #6c757d' }} className='clickable'>\n                                <Accordion.Toggle as={Card.Header} eventKey='areas'>\n                                    <h5>Areas</h5>\n                                </Accordion.Toggle>\n                                <Accordion.Collapse eventKey='areas'>\n                                    <div className='p-3'>\n                                        <Form.Check\n                                            label='Include all areas'\n                                            checked={!useAreaFilter}\n                                            onChange={event => {\n                                                setUseAreaFilter(!event.target.checked);\n                                                if (event.target.checked) {\n                                                    setIncludedAreas(unlockedRegions);\n                                                }\n                                            }}\n                                        />\n                                        <Form.Control\n                                            as='select'\n                                            multiple\n                                            htmlSize='5'\n                                            value={includedAreas}\n                                            onChange={event => {\n                                                setUseAreaFilter(true);\n                                                const { options } = event.target;\n                                                const selectedAreas = [];\n                                                for (let i = 0, l = options.length; i < l; i++) {\n                                                    if (options[i].selected) {\n                                                        selectedAreas.push(options[i].value);\n                                                    }\n                                                }\n                                                setIncludedAreas(selectedAreas);\n                                            }}\n                                        >\n                                            {unlockedRegions.map(area => (\n                                                <option key={area}>{area}</option>\n                                            ))}\n                                        </Form.Control>\n                                    </div>\n                                </Accordion.Collapse>\n                            </Card>\n                            <Card bg='dark' text='white' style={{ border: '1px solid #6c757d' }} className='clickable'>\n                                <Accordion.Toggle as={Card.Header} eventKey='difficulties'>\n                                    <h5>Difficulties</h5>\n                                </Accordion.Toggle>\n                                <Accordion.Collapse eventKey='difficulties'>\n                                    <div className='p-3'>\n                                        <Form.Check\n                                            label='Include all difficulties'\n                                            checked={!useDifficultyFilter}\n                                            onChange={event => {\n                                                setUseDifficultyFilter(!event.target.checked);\n                                                if (event.target.checked) {\n                                                    setIncludedDifficulties(DIFFICULTIES);\n                                                }\n                                            }}\n                                        />\n                                        <Form.Control\n                                            as='select'\n                                            multiple\n                                            htmlSize='5'\n                                            value={includedDifficulties}\n                                            onChange={event => {\n                                                setUseDifficultyFilter(true);\n                                                const { options } = event.target;\n                                                const selectedDifficulties = [];\n                                                for (let i = 0, l = options.length; i < l; i++) {\n                                                    if (options[i].selected) {\n                                                        selectedDifficulties.push(options[i].value);\n                                                    }\n                                                }\n                                                setIncludedDifficulties(selectedDifficulties);\n                                            }}\n                                        >\n                                            {DIFFICULTIES.map(difficulty => (\n                                                <option key={difficulty}>{difficulty}</option>\n                                            ))}\n                                        </Form.Control>\n                                    </div>\n                                </Accordion.Collapse>\n                            </Card>\n                        </Accordion>\n                    </Card>\n                </Col>\n                <Col>\n                    <Card\n                        bg='dark'\n                        text='white'\n                        style={{ border: '1px solid #6c757d', borderRadius: '1rem' }}\n                        className='p-3 text-center'\n                    >\n                        <h4>Current Generated Task:</h4>\n                        <>\n                            <div className='m-3'>\n                                {currentTaskId === -1 ? (\n                                    <div>No active task, click \"Generate new task\" to get your next task!</div>\n                                ) : (\n                                    <>\n                                        <h5>{`${taskData.tasksById[currentTaskId].name}`}</h5>\n                                        <div className='mb-1'>{taskData.tasksById[currentTaskId].description}</div>\n                                        <div className='small'>\n                                            {`Area: ${taskData.tasksById[currentTaskId].area} | ` +\n                                                `Difficulty: ${taskData.tasksById[currentTaskId].difficulty} | ` +\n                                                `Value: ${\n                                                    DIFFICULTY_POINTS[taskData.tasksById[currentTaskId].difficulty]\n                                                } pts`}\n                                        </div>\n                                    </>\n                                )}\n                            </div>\n                            <div className='mt-3 text-center'>\n                                <Button\n                                    variant='outline-light'\n                                    onClick={() => {\n                                        setGenerateErrText('');\n                                        const taskPool = applyFilters(taskData.tasks, taskFilters);\n                                        if (taskPool.length === 0) {\n                                            setGenerateErrText(\n                                                'No tasks found with the given criteria! Check your configuration and try again.'\n                                            );\n                                            return;\n                                        }\n                                        const taskId = Math.floor(Math.random() * taskPool.length);\n                                        const newTask = taskPool[taskId];\n                                        setCompleteButtonEnabled(true);\n                                        setCurrentTaskId(newTask.id);\n                                    }}\n                                >\n                                    Generate new task\n                                </Button>\n                                <Button\n                                    variant='light'\n                                    className='ml-2'\n                                    onClick={() => {\n                                        setCompleteButtonEnabled(false);\n                                        updateTaskStatus.setCompleted(currentTaskId, true);\n                                        setCurrentTaskId(-1);\n                                    }}\n                                    disabled={!completeButtonEnabled}\n                                >\n                                    Complete task\n                                </Button>\n                                {generateErrText && <p className='mt-1 text-danger small'>{generateErrText}</p>}\n                            </div>\n                        </>\n                    </Card>\n                </Col>\n            </Row>\n        </Card>\n    );\n}\n","import React from 'react';\n\nexport default function Divider({ spacingProps = 'mt-2 mb-2' }) {\n    return <div className={spacingProps} style={{ borderTop: '0.5px solid', width: '100%' }} />;\n}\n","import React, { useState } from 'react';\nimport { Card, Row, Col, Tabs, Tab, Nav, Form, Button } from 'react-bootstrap';\nimport taskData from '../resources/taskData.json';\nimport {\n    getMaxCompletableTaskPoints,\n    isTaskComplete,\n    isTaskOnTodoList,\n    getTaskPointsOnTodoList,\n    getCompletedTasksInArea,\n    getCompletedTasksWithDifficulty,\n    getPointsEarned,\n    isTaskHidden,\n    removeCompletedFromTodo,\n    isTaskCompletable,\n    isTaskCompletableWithRegions,\n} from '../util/task-util';\nimport { isRelicUnlocked } from '../util/relic-util';\nimport TaskTable from './TaskTable';\nimport RandomTaskGenerator from './RandomTaskGenerator';\nimport { INITIAL_REGIONS_STATE } from '../util/region-util';\nimport useLocalStorage from '../hooks/useLocalStorage';\nimport { LOCALSTORAGE_KEYS, SESSIONSTORAGE_KEYS } from '../util/browser-util';\nimport { CardDeck } from '../../node_modules/react-bootstrap/esm/index';\nimport useScreenSize from '../hooks/useScreenSize';\nimport Divider from './Divider';\nimport HiscoreLookup from './HiscoreLookup';\n\nexport default function TaskTracker({ taskStatus, updateTaskStatus, unlockedRegions = INITIAL_REGIONS_STATE }) {\n    const [hideLockedAreas, setHideLockedAreas] = useLocalStorage(LOCALSTORAGE_KEYS.FILTER_HIDE_LOCKED_AREAS, true);\n    const [selectedStatus, setSelectedStatus] = useLocalStorage(LOCALSTORAGE_KEYS.FILTER_SELECTED_STATUS, 'All');\n    const [showHiddenTasks, setShowHiddenTasks] = useLocalStorage(LOCALSTORAGE_KEYS.FILTER_SHOW_HIDDEN_TASKS, false);\n    const [hideTodoTasks, setHideTodoTasks] = useLocalStorage(LOCALSTORAGE_KEYS.FILTER_HIDE_TODO_TASKS, false);\n    const [hiscores, , refreshHiscores] = useLocalStorage(SESSIONSTORAGE_KEYS.HISCORES_CACHE, null, true);\n    const screenSize = useScreenSize();\n\n    const regionsToShow = ['Common', ...unlockedRegions];\n    const maxCompletableTaskPoints = getMaxCompletableTaskPoints(regionsToShow, taskStatus);\n    const plannedOnTodoList = getTaskPointsOnTodoList(taskStatus, regionsToShow);\n\n    const todoListFilter = task => {\n        return isTaskOnTodoList(task.id, taskStatus);\n    };\n\n    return (\n        <>\n            <CardDeck>\n                <Card bg='dark' text='white' className='mt-3 p-2 text-center'>\n                    <h2>\n                        {`Tasks Completed: ${taskStatus.tasks.length} / ${\n                            maxCompletableTaskPoints.tasks.Total\n                        } (${Math.round((taskStatus.tasks.length / maxCompletableTaskPoints.tasks.Total) * 100)}%)`}\n                    </h2>\n                    <div className='d-flex justify-content-around'>\n                        <div className='d-flex flex-column'>\n                            {taskData.difficulties.map(difficultyJson => {\n                                const numComplete = getCompletedTasksWithDifficulty(difficultyJson.value, taskStatus)\n                                    .length;\n                                const totalTasks = maxCompletableTaskPoints.tasks[difficultyJson.value];\n                                return (\n                                    <div key={difficultyJson.value}>\n                                        {`${difficultyJson.label}: ${numComplete} / ${totalTasks}`}\n                                    </div>\n                                );\n                            })}\n                        </div>\n                        <div className='d-flex flex-column'>\n                            {regionsToShow.map(region => {\n                                const numComplete = getCompletedTasksInArea(region, taskStatus).length;\n                                const totalTasks = maxCompletableTaskPoints.tasks[region];\n                                return <div key={region}>{`${region}: ${numComplete} / ${totalTasks}`}</div>;\n                            })}\n                        </div>\n                    </div>\n                </Card>\n                <Card bg='dark' text='white' className='mt-3 p-2 text-center'>\n                    <h2>\n                        {`Points Earned: ${getPointsEarned(taskStatus)} / ${maxCompletableTaskPoints.points.Total}`}\n                    </h2>\n                    <div className='d-flex justify-content-around'>\n                        <div className='d-flex flex-column'>\n                            {taskData.difficulties.map(difficultyJson => {\n                                const numEarned = getPointsEarned(taskStatus, null, difficultyJson.value);\n                                const totalPoints = maxCompletableTaskPoints.points[difficultyJson.value];\n                                return (\n                                    <div key={difficultyJson.value}>\n                                        {`${difficultyJson.label}: ${numEarned} / ${totalPoints}`}\n                                    </div>\n                                );\n                            })}\n                        </div>\n                        <div className='d-flex flex-column'>\n                            {regionsToShow.map(region => {\n                                const numEarned = getPointsEarned(taskStatus, region);\n                                const totalPoints = maxCompletableTaskPoints.points[region];\n                                return <div key={region}>{`${region}: ${numEarned} / ${totalPoints}`}</div>;\n                            })}\n                        </div>\n                    </div>\n                </Card>\n            </CardDeck>\n            <Card bg='dark' text='white' className='mt-3'>\n                <Tabs\n                    fill\n                    defaultActiveKey='all'\n                    className='tab-bar-secondary'\n                    style={{ margin: '0', borderRadius: '.25rem .25rem 0rem 0rem' }}\n                >\n                    <Tab eventKey='all' title='All Tasks'>\n                        <TaskTableWrapper\n                            taskStatus={taskStatus}\n                            updateTaskStatus={updateTaskStatus}\n                            unlockedRegions={regionsToShow}\n                            screenSize={screenSize}\n                            selectedStatus={selectedStatus}\n                            setSelectedStatus={setSelectedStatus}\n                            hideLockedAreas={hideLockedAreas}\n                            setHideLockedAreas={setHideLockedAreas}\n                            showHiddenTasks={showHiddenTasks}\n                            setShowHiddenTasks={setShowHiddenTasks}\n                            hideTodoTasks={hideTodoTasks}\n                            setHideTodoTasks={setHideTodoTasks}\n                            hiscores={hiscores}\n                            refreshHiscores={refreshHiscores}\n                        />\n                    </Tab>\n                    <Tab eventKey='random' title='Generate Random Task'>\n                        <RandomTaskGenerator\n                            refreshHiscores={refreshHiscores}\n                            hiscores={hiscores}\n                            unlockedRegions={regionsToShow}\n                            taskStatus={taskStatus}\n                            updateTaskStatus={updateTaskStatus}\n                        />\n                    </Tab>\n                    <Tab eventKey='todo' title='To-Do List'>\n                        <TaskTableWrapper\n                            taskStatus={taskStatus}\n                            updateTaskStatus={updateTaskStatus}\n                            unlockedRegions={regionsToShow}\n                            screenSize={screenSize}\n                            taskFilters={[todoListFilter]}\n                            selectedStatus={selectedStatus}\n                            setSelectedStatus={setSelectedStatus}\n                            hideLockedAreas={hideLockedAreas}\n                            setHideLockedAreas={setHideLockedAreas}\n                            plannedOnTodoList={plannedOnTodoList}\n                            showHiddenTasks={showHiddenTasks}\n                            setShowHiddenTasks={setShowHiddenTasks}\n                            hiscores={hiscores}\n                            refreshHiscores={refreshHiscores}\n                        />\n                    </Tab>\n                </Tabs>\n            </Card>\n        </>\n    );\n}\n\nfunction TaskTableWrapper({\n    taskStatus,\n    updateTaskStatus,\n    unlockedRegions,\n    screenSize,\n    selectedStatus,\n    setSelectedStatus,\n    hideLockedAreas,\n    setHideLockedAreas,\n    plannedOnTodoList,\n    showHiddenTasks,\n    setShowHiddenTasks,\n    hideTodoTasks,\n    setHideTodoTasks,\n    hiscores,\n    refreshHiscores,\n    taskFilters = [],\n}) {\n    const [selectedArea, setSelectedArea] = useState('All');\n    const [selectedReqs, setSelectedReqs] = useState('All');\n    const [isSkillingProdigy, setIsSkillingProdigy] = useState(isRelicUnlocked('1,3'));\n\n    const allFilters = [...taskFilters];\n    if (selectedStatus === 'Incomplete') {\n        allFilters.push(task => !isTaskComplete(task.id, taskStatus));\n    } else if (selectedStatus === 'Complete') {\n        allFilters.push(task => isTaskComplete(task.id, taskStatus));\n    }\n    if (hideLockedAreas) {\n        allFilters.push(task => {\n            return isTaskCompletableWithRegions(task.id, unlockedRegions);\n        });\n    }\n    if (!showHiddenTasks) {\n        allFilters.push(task => !isTaskHidden(task.id, taskStatus));\n    }\n    if (hideTodoTasks) {\n        allFilters.push(task => !isTaskOnTodoList(task.id, taskStatus));\n    }\n    if (selectedReqs === 'Missing') {\n        allFilters.push(task => !isTaskCompletable(task.id, hiscores, isSkillingProdigy));\n    } else if (selectedReqs === 'Have') {\n        allFilters.push(task => isTaskCompletable(task.id, hiscores, isSkillingProdigy));\n    }\n\n    return (\n        <Card bg='dark' text='white' style={{ border: '2px solid #6c757d', borderRadius: '0rem 0rem .25rem .25rem' }}>\n            <div className='m-3 text-center'>\n                <Row>\n                    <Col lg={2}>\n                        Hiscores lookup:\n                        <HiscoreLookup refreshStateCallback={refreshHiscores} />\n                        <Form.Check\n                            label='Include Skilling Prodigy boost'\n                            defaultChecked={isSkillingProdigy}\n                            onChange={event => {\n                                setIsSkillingProdigy(event.target.checked);\n                            }}\n                        />\n                        <Divider />\n                        <Form.Check\n                            label='Hide tasks in locked areas'\n                            checked={hideLockedAreas}\n                            onChange={() => setHideLockedAreas(prevHideLocked => !prevHideLocked)}\n                        />\n                        <Form.Check\n                            label={`Show hidden tasks (${taskStatus.hidden.length} tasks)`}\n                            checked={showHiddenTasks}\n                            onChange={() => setShowHiddenTasks(prevShowHidden => !prevShowHidden)}\n                        />\n                        {!plannedOnTodoList && (\n                            <>\n                                <Form.Check\n                                    label='Hide to-do tasks'\n                                    checked={hideTodoTasks}\n                                    onChange={() => setHideTodoTasks(prevHideTodo => !prevHideTodo)}\n                                />\n                            </>\n                        )}\n                        <Tab.Container activeKey={selectedArea}>\n                            <Divider />\n                            <h5>Areas:</h5>\n                            <Nav\n                                variant='pills'\n                                className={`mt-3 tab-bar-secondary ${\n                                    screenSize.isSizeOrLarger('xl') ? 'flex-column' : 'd-flex justify-content-around'\n                                }`}\n                            >\n                                <Nav.Item key='All'>\n                                    <Nav.Link eventKey='All' onClick={() => setSelectedArea('All')}>\n                                        All\n                                    </Nav.Link>\n                                </Nav.Item>\n                                {hideLockedAreas\n                                    ? unlockedRegions.map(area => (\n                                          <Nav.Item key={area}>\n                                              <Nav.Link eventKey={area} onClick={() => setSelectedArea(area)}>\n                                                  {area}\n                                              </Nav.Link>\n                                          </Nav.Item>\n                                      ))\n                                    : taskData.areas.map(area => (\n                                          <Nav.Item key={area}>\n                                              <Nav.Link eventKey={area} onClick={() => setSelectedArea(area)}>\n                                                  {area}\n                                              </Nav.Link>\n                                          </Nav.Item>\n                                      ))}\n                            </Nav>\n                        </Tab.Container>\n                        <Tab.Container activeKey={selectedStatus}>\n                            <Divider />\n                            <h5>Status:</h5>\n                            <Nav\n                                variant='pills'\n                                className={`mt-3 mb-3 tab-bar-secondary ${\n                                    screenSize.isSizeOrLarger('lg') ? 'flex-column' : 'd-flex justify-content-around'\n                                }`}\n                            >\n                                <Nav.Item key='All'>\n                                    <Nav.Link eventKey='All' onClick={() => setSelectedStatus('All')}>\n                                        All\n                                    </Nav.Link>\n                                </Nav.Item>\n                                <Nav.Item key='Complete'>\n                                    <Nav.Link eventKey='Complete' onClick={() => setSelectedStatus('Complete')}>\n                                        Complete\n                                    </Nav.Link>\n                                </Nav.Item>\n                                <Nav.Item key='Incomplete'>\n                                    <Nav.Link eventKey='Incomplete' onClick={() => setSelectedStatus('Incomplete')}>\n                                        Incomplete\n                                    </Nav.Link>\n                                </Nav.Item>\n                            </Nav>\n                        </Tab.Container>\n                        <Tab.Container activeKey={selectedReqs}>\n                            <Divider />\n                            <h5>Skill requirements:</h5>\n                            <Nav\n                                variant='pills'\n                                className={`mt-3 mb-3 tab-bar-secondary ${\n                                    screenSize.isSizeOrLarger('lg') ? 'flex-column' : 'd-flex justify-content-around'\n                                }`}\n                            >\n                                <Nav.Item key='All'>\n                                    <Nav.Link eventKey='All' onClick={() => setSelectedReqs('All')}>\n                                        All tasks\n                                    </Nav.Link>\n                                </Nav.Item>\n                                <Nav.Item key='Missing'>\n                                    <Nav.Link eventKey='Missing' onClick={() => setSelectedReqs('Missing')}>\n                                        Missing requirements\n                                    </Nav.Link>\n                                </Nav.Item>\n                                <Nav.Item key='Have'>\n                                    <Nav.Link eventKey='Have' onClick={() => setSelectedReqs('Have')}>\n                                        Have requirements\n                                    </Nav.Link>\n                                </Nav.Item>\n                            </Nav>\n                        </Tab.Container>\n                    </Col>\n\n                    <Col lg={10}>\n                        {plannedOnTodoList && (\n                            <>\n                                {screenSize.isSizeOrSmaller('md') && <Divider />}\n                                <div className='d-flex justify-content-around align-items-center flex-wrap mb-2'>\n                                    <h5 className='mb-1 mt-1 mr-2'>\n                                        {`Incomplete Tasks on To-do List: ${plannedOnTodoList.tasks}`}\n                                    </h5>\n                                    <h5 className='mb-1 mt-1 mr-2'>\n                                        {`Points Remaining on To-do List: ${plannedOnTodoList.points}`}\n                                    </h5>\n                                    <div className='mb-1 mt-1'>\n                                        <Button\n                                            variant='outline-light'\n                                            onClick={() =>\n                                                removeCompletedFromTodo(taskStatus, updateTaskStatus.setTodoListed)\n                                            }\n                                        >\n                                            Remove completed tasks\n                                        </Button>\n                                    </div>\n                                </div>\n                            </>\n                        )}\n                        <Nav>\n                            <TaskTable\n                                area={selectedArea}\n                                taskStatus={taskStatus}\n                                updateTaskStatus={updateTaskStatus}\n                                taskFilters={allFilters}\n                                hiscores={hiscores}\n                                isSkillingProdigy={isSkillingProdigy}\n                            />\n                        </Nav>\n                    </Col>\n                </Row>\n            </div>\n        </Card>\n    );\n}\n","import { useState, useCallback } from 'react';\nimport { parse, stringify } from 'query-string';\n\n/** shamelessly copy/pasted https://medium.com/swlh/81ccdfcb174f */\nexport default function useQueryString(key, initialValue) {\n    const [value, setValue] = useState(getQueryStringValue(key) || initialValue);\n    const onSetValue = useCallback(\n        newValue => {\n            setValue(newValue);\n            setQueryStringValue(key, newValue);\n        },\n        [key]\n    );\n\n    return [value, onSetValue];\n}\n\nfunction setQueryStringWithoutPageReload(qsValue) {\n    const newurl = `${window.location.protocol}//${window.location.host}${window.location.pathname}${qsValue}${window.location.hash}`;\n    window.history.pushState({ path: newurl }, '', newurl);\n}\n\nfunction setQueryStringValue(key, value, queryString = window.location.search) {\n    const values = parse(queryString);\n    const newQsValue = stringify({ ...values, [key]: value });\n    setQueryStringWithoutPageReload(`?${newQsValue}`);\n}\n\nfunction getQueryStringValue(key, queryString = window.location.search) {\n    const values = parse(queryString);\n    return values[key];\n}\n","import React from 'react';\nimport { Tabs, Tab } from 'react-bootstrap';\nimport RegionsTracker from '../components/RegionsTracker';\nimport RelicsTracker from '../components/RelicsTracker';\nimport TaskTracker from '../components/TaskTracker';\nimport useLocalStorage from '../hooks/useLocalStorage';\nimport useQueryString from '../hooks/useQueryString';\nimport { LOCALSTORAGE_KEYS } from '../util/browser-util';\nimport { INITIAL_REGIONS_STATE } from '../util/region-util';\nimport useTaskStatus from '../hooks/useTaskStatus';\nimport { getPointsEarned } from '../util/task-util';\nimport { getContentWidthClass } from '../util/settings-util';\n\nexport default function CharacterTracker() {\n    const [selectedTab, onSetSelectedTab] = useQueryString('tab');\n    const [taskStatus, updateTaskStatus] = useTaskStatus();\n    const [unlockedRegions, setUnlockedRegions] = useLocalStorage(\n        LOCALSTORAGE_KEYS.UNLOCKED_REGIONS,\n        INITIAL_REGIONS_STATE\n    );\n\n    return (\n        <div className={`${getContentWidthClass()} mb-4`}>\n            <h1 className='mt-2 light-text text-center'>Character Tracker</h1>\n            <Tabs\n                fill\n                variant='pills'\n                defaultActiveKey={selectedTab}\n                className='mt-3 tab-bar-dark'\n                onSelect={onSetSelectedTab}\n            >\n                {/* <Tab eventKey=\"overview\" title=\"Character Overview\">\n                    <Card bg='dark' text='white' className=\"mt-3\">\n                        <div className=\"m-3 text-center\">\n                            TODO\n                        </div>\n                    </Card>\n                </Tab> */}\n                <Tab eventKey='relics' title='Relics'>\n                    <RelicsTracker totalPoints={getPointsEarned(taskStatus)} />\n                </Tab>\n                <Tab eventKey='regions' title='Regions'>\n                    <RegionsTracker\n                        totalTasks={taskStatus.tasks.length}\n                        unlockedRegions={unlockedRegions}\n                        setUnlockedRegionsCallback={setUnlockedRegions}\n                    />\n                </Tab>\n                <Tab eventKey='tasks' title='Tasks'>\n                    <TaskTracker\n                        taskStatus={taskStatus}\n                        updateTaskStatus={updateTaskStatus}\n                        unlockedRegions={unlockedRegions}\n                    />\n                </Tab>\n            </Tabs>\n        </div>\n    );\n}\n","import React from 'react';\nimport { Card, CardDeck } from 'react-bootstrap';\nimport { getContentWidthClass } from '../util/settings-util';\n\nexport default function About() {\n    return (\n        <div className={getContentWidthClass()}>\n            <Card bg='dark' text='white' className='mt-3'>\n                <h1 className='mt-2 light-text text-center'>OS LEAGUE TOOLS</h1>\n                <p className='text-center'>Your hub for all your OSRS leagues needs.</p>\n            </Card>\n            <CardDeck>\n                <Card bg='dark' text='white' className='mt-3'>\n                    <h3 className='mt-2 light-text text-center'>Features:</h3>\n                    <div className='d-flex flex-column text-center mb-2'>\n                        <div>Plan your relic and area unlocks</div>\n                        <div>View, sort, and filter lists of tasks to decide what to do next</div>\n                        <div>Create a task to-do list</div>\n                        <div>Use calculators to plan your grind</div>\n                        <div>Filter and adjust calculators to your liking</div>\n                        <div>Integrate your personal league build with calculator settings</div>\n                        <div>Catch up on league-related news posts</div>\n                        <div>...and more coming soon!</div>\n                    </div>\n                </Card>\n                <Card bg='dark' text='white' className='mt-3'>\n                    <h3 className='mt-2 light-text text-center'>About the site:</h3>\n                    <div className='text-center p-1'>\n                        <p>\n                            OS League Tools is lovingly crafted by chaiinchomp, a runescape veteran since 2005 and\n                            longtime spreadsheet enthusiast.\n                        </p>\n                        <p>\n                            The site is developed in React JS, with images and data from the official OSRS wiki. It is\n                            open source - head over to{' '}\n                            <a href='https://github.com/chaiinchomp/os-league-tools'>Github</a> if you're interested in\n                            contributing.\n                        </p>\n                        <p>\n                            If you'd like to keep up-to-date on site changes, report bugs, make suggestions, or just\n                            hang out, please come by the <a href='https://discord.gg/GQ5kVyU'>discord server</a>.\n                        </p>\n                        <p>You can also message me ingame (RSN: chaiinchomp) where I usually have private chat on.</p>\n                        <p>\n                            If you're enjoying the site and want to throw a few bucks my way in support to help with\n                            hosting/server costs, you can do so here:{' '}\n                            <a href='https://ko-fi.com/chaiinchomp'>https://ko-fi.com/chaiinchomp</a> (but seriously,\n                            it's free, you don't have to).\n                        </p>\n                    </div>\n                </Card>\n            </CardDeck>\n        </div>\n    );\n}\n","import React from 'react';\nimport { Card } from 'react-bootstrap';\nimport { getContentWidthClass } from '../util/settings-util';\n\nexport default function PluginInfo() {\n    return (\n        <div className={getContentWidthClass()}>\n            <Card bg='dark' text='white' className='mt-3 p-2 text-center'>\n                <h2 className='mt-2 light-text text-center'>OS League Tools RuneLite Plugin</h2>\n                <p>\n                    {`OS League Tools has RuneLite integration! The official plugin can export your tasks, regions, and\n                    relics to the site so you don't have to input them manually.`}\n                </p>\n            </Card>\n            <Card bg='dark' text='white' className='mt-3 p-2 text-center'>\n                <h4>Instructions:</h4>\n                <ol>\n                    <li>\n                        Install the \"OsLeague\" plugin using the{' '}\n                        <a href='https://github.com/runelite/runelite/wiki/Information-about-the-Plugin-Hub'>\n                            plugin hub\n                        </a>\n                    </li>\n                    <li>\n                        Go to the Leagues tab ingame and open/close each interface to make sure your data is up-to-date.\n                    </li>\n                    <li>Click on the OS League Tools checkmark icon on the top toolbar to copy your data</li>\n                    <li>\n                        Open the Manage Data window (top right) and paste the copied data in to the Runelite Import tab\n                    </li>\n                </ol>\n\n                <a href='https://user-images.githubusercontent.com/17709869/98069290-0535cd00-1e24-11eb-90a1-49a8a04b7072.gif'>\n                    <img\n                        style={{ width: '100%', maxWidth: '1069px' }}\n                        src='https://user-images.githubusercontent.com/17709869/98069290-0535cd00-1e24-11eb-90a1-49a8a04b7072.gif'\n                        alt=''\n                    />\n                </a>\n                <p className='small mt-0'>\n                    <i>(click to enlarge gif)</i>\n                </p>\n            </Card>\n        </div>\n    );\n}\n","import React from 'react';\nimport { Card, Row, Col, Nav, Form, Tab, Button } from 'react-bootstrap';\nimport _ from 'lodash';\nimport Divider from '../components/Divider';\nimport useLocalStorage from '../hooks/useLocalStorage';\nimport {\n    SETTINGS_KEYS,\n    getContentWidthClass,\n    CONTENT_WIDTH_DEFAULT,\n    CONTENT_WIDTH_VALUES,\n} from '../util/settings-util';\nimport { resetLocalStorageData } from '../util/browser-util';\n\nexport default function Settings() {\n    const [contentWidth, setContentWidth] = useLocalStorage(SETTINGS_KEYS.CONTENT_WIDTH, CONTENT_WIDTH_DEFAULT);\n    const [hiddenColumns, setHiddenColumns] = useLocalStorage(SETTINGS_KEYS.HIDDEN_COLUMNS, []);\n\n    return (\n        <div className={getContentWidthClass()}>\n            <Card bg='dark' text='white' className='mt-3'>\n                <h3 className='text-center mt-3'>Settings</h3>\n                <Tab.Container defaultActiveKey='interface'>\n                    <Row className='m-3'>\n                        <Col lg={4}>\n                            <Card bg='dark' text='white' style={{ border: '0' }} className='p-3'>\n                                <Nav variant='pills' className='flex-column tab-bar-secondary' fill>\n                                    <Nav.Item>\n                                        <Nav.Link eventKey='interface'>\n                                            <h5>Interface</h5>\n                                        </Nav.Link>\n                                    </Nav.Item>\n                                    <Nav.Item>\n                                        <Nav.Link eventKey='user-data'>\n                                            <h5>User Data</h5>\n                                        </Nav.Link>\n                                    </Nav.Item>\n                                </Nav>\n                            </Card>\n                        </Col>\n                        <Col>\n                            <Card\n                                bg='dark'\n                                text='white'\n                                style={{ border: '1px solid #6c757d', borderRadius: '1rem' }}\n                                className='p-3'\n                            >\n                                <div className='m-3'>\n                                    <Tab.Content>\n                                        <Tab.Pane eventKey='interface'>\n                                            <Form.Check\n                                                label='Use full screen width for site content (no sidebar padding)'\n                                                checked={contentWidth === CONTENT_WIDTH_VALUES.MAX}\n                                                onChange={event =>\n                                                    setContentWidth(\n                                                        event.target.checked\n                                                            ? CONTENT_WIDTH_VALUES.MAX\n                                                            : CONTENT_WIDTH_VALUES.PADDED\n                                                    )\n                                                }\n                                            />\n                                            <Divider spacingProps='mt-3 mb-3' />\n                                            Configure visibility of columns on task tracker:\n                                            <div className='mt-1 ml-3'>\n                                                {[\n                                                    'Difficulty',\n                                                    'Category',\n                                                    'Subcategory',\n                                                    'Requirements',\n                                                    'Manage',\n                                                ].map(columnName => (\n                                                    <Form.Check\n                                                        key={columnName}\n                                                        label={`Hide \"${columnName}\" column`}\n                                                        checked={hiddenColumns.includes(columnName)}\n                                                        onChange={event => {\n                                                            if (event.target.checked) {\n                                                                setHiddenColumns(prevState => [\n                                                                    ...prevState,\n                                                                    columnName,\n                                                                ]);\n                                                            } else {\n                                                                setHiddenColumns(prevState =>\n                                                                    _.without(prevState, columnName)\n                                                                );\n                                                            }\n                                                        }}\n                                                    />\n                                                ))}\n                                            </div>\n                                        </Tab.Pane>\n                                    </Tab.Content>\n                                    <Tab.Content>\n                                        <Tab.Pane eventKey='user-data'>\n                                            <p>\n                                                <b>WARNING: Resetting your data is irreversible.</b> Proceed with\n                                                caution.\n                                            </p>\n                                            <Button\n                                                className='m-2'\n                                                variant='light'\n                                                onClick={() => resetLocalStorageData()}\n                                            >\n                                                Reset all user data and settings to default\n                                            </Button>\n                                        </Tab.Pane>\n                                    </Tab.Content>\n                                </div>\n                            </Card>\n                        </Col>\n                    </Row>\n                </Tab.Container>\n            </Card>\n        </div>\n    );\n}\n","import React from 'react';\nimport { Card, CardDeck } from 'react-bootstrap';\nimport { getContentWidthClass } from '../util/settings-util';\n\nexport default function ComingSoon() {\n    return (\n        <div className={getContentWidthClass()}>\n            <Card bg='dark' text='white' className='mt-3'>\n                <h1 className='mt-2 light-text text-center'>OS LEAGUE TOOLS WILL RETURN!</h1>\n            </Card>\n\n            <CardDeck>\n                <Card bg='dark' text='white' className='mt-3'>\n                    <h3 className='mt-2 light-text text-center'>Yes, we are coming back for leagues 3!</h3>\n                    <div className='d-flex flex-column text-center m-4'>\n                        <p>\n                            There's a lot to do before then though. The site is being rewritten from the ground up to\n                            support all the things you've been asking for:\n                        </p>\n                        <p>\n                            <div className='mb-1'>\n                                <strong>New and improved UI:</strong>\n                            </div>\n                            <div>\n                                Faster, snappier, more compact, and more customizable. Yes, there will even be a light\n                                mode.\n                            </div>\n                        </p>\n                        <p>\n                            <div className='mb-1'>\n                                <strong>User login:</strong>\n                            </div>\n                            <div>\n                                Sync your data across browsers without manually importing and exporting. Alt-scapers,\n                                got you covered: this will include multiple character support.\n                            </div>\n                        </p>\n                        <p>\n                            <div className='mb-1'>\n                                <strong>Revamped Runelite plugin:</strong>\n                            </div>\n                            <div>\n                                Link your OS League account with Runelite for effortless syncing.{' '}\n                                <i>Pending discussion and approval from Runelite team.</i>\n                            </div>\n                        </p>\n                        <p>\n                            <div className='mb-1'>\n                                <strong>More tools and trackers:</strong>\n                            </div>\n                            <div>\n                                Quests! Achievement and combat diaries! <i>Theeeee</i> collection log! Plus all new\n                                calculators for every skill, with much-requested features like a configurable \"from\n                                scratch\" mode, and better support for activities with variable exp rates like barbarian\n                                fishing and minigames.\n                            </div>\n                        </p>\n                        <p>\n                            <div className='mb-1'>\n                                <strong>Expansion to the main game:</strong>\n                            </div>\n                            <div>\n                                Kind of a shame to waste all this effort for only a couple months each year, isn't it?\n                                I'll be rewriting everything with main-game support in mind, so keep an eye out for a\n                                new site launching soon with all your favorite tools, trackers, and calculators for your\n                                main account.\n                            </div>\n                        </p>\n                        <p>\n                            <div className='mb-1'>\n                                <strong>And more...</strong>\n                            </div>\n                            <div>\n                                As usual, the <a href='https://discord.gg/GQ5kVyU'>OS Leagues discord</a> is the place\n                                to track changes, announcements, and make suggestions. Come by if you're interested in\n                                following the progress and maybe even helping out! Currently things aren't yet in a\n                                stable enough state for contributors, but I'll be announcing in the discord when that\n                                changes.\n                            </div>\n                        </p>\n                    </div>\n                </Card>\n                <Card bg='dark' text='white' className='mt-3'>\n                    <h3 className='mt-2 light-text text-center'>Leagues 3 announcement</h3>\n                    <p className='text-center m-3'>\n                        <iframe\n                            title='Leagues 3 announcement on Twitch'\n                            src='https://player.twitch.tv/?video=v1104047132&time=1h14m27s&parent=localhost&parent=www.osleague.tools&autoplay=false'\n                            width='100%'\n                            height='500'\n                            allowFullScreen\n                        />\n                    </p>\n                </Card>\n            </CardDeck>\n        </div>\n    );\n}\n","import React, { useEffect } from 'react';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\nimport { createHashHistory } from 'history';\nimport ReactGA from 'react-ga';\nimport TopNav from './components/TopNav';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'react-bootstrap-table-next/dist/react-bootstrap-table2.min.css';\nimport './styles/index.scss';\nimport Homepage from './pages/Homepage';\nimport Calculators from './pages/Calculators';\nimport Calculator from './pages/SkillCalculator';\nimport Planner from './pages/SkillPlanner';\nimport CharacterTracker from './pages/CharacterTracker';\nimport About from './pages/About';\nimport PluginInfo from './pages/PluginInfo';\nimport Settings from './pages/Settings';\nimport ComingSoon from './pages/ComingSoon';\n\nconst history = createHashHistory();\nconst trackingId = process.env.REACT_APP_GA_TRACKING || '';\nReactGA.initialize(trackingId, {\n    gaOptions: {\n        siteSpeedSampleRate: 100,\n    },\n});\nhistory.listen(() => {\n    ReactGA.pageview(window.location.pathname + window.location.search + window.location.hash);\n});\n\nexport default function App() {\n    useEffect(() => {\n        ReactGA.pageview(window.location.pathname + window.location.search + window.location.hash);\n    }, []);\n\n    return (\n        <div className='App'>\n            <HashRouter basename='/'>\n                <TopNav />\n                <Switch>\n                    <Route exact path='/' component={ComingSoon} />\n                    <Route path='/news' component={Homepage} />\n                    <Route path='/tracker' component={CharacterTracker} />\n                    <Route exact path='/calculators' component={Calculators} />\n                    <Route path='/calculators/:skill' component={Calculator} />\n                    <Route path='/planners/:skill' component={Planner} />\n                    <Route path='/about' component={About} />\n                    <Route path='/plugin' component={PluginInfo} />\n                    <Route path='/settings' component={Settings} />\n                </Switch>\n            </HashRouter>\n        </div>\n    );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}